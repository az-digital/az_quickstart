diff --git a/core/modules/media/js/plugins/drupalmedia/plugin.es6.js b/core/modules/media/js/plugins/drupalmedia/plugin.es6.js
index ef7ea3f9b5..bd44762bfa 100644
--- a/core/modules/media/js/plugins/drupalmedia/plugin.es6.js
+++ b/core/modules/media/js/plugins/drupalmedia/plugin.es6.js
@@ -107,6 +107,7 @@
             attributes: {
               '!data-entity-type': true,
               '!data-entity-uuid': true,
+              'data-view-mode': true,
               'data-align': true,
               'data-caption': true,
               alt: true,
diff --git a/core/modules/media/js/plugins/drupalmedia/plugin.js b/core/modules/media/js/plugins/drupalmedia/plugin.js
index 7061bf8144..9a1f3a3eb4 100644
--- a/core/modules/media/js/plugins/drupalmedia/plugin.js
+++ b/core/modules/media/js/plugins/drupalmedia/plugin.js
@@ -88,6 +88,7 @@
             attributes: {
               '!data-entity-type': true,
               '!data-entity-uuid': true,
+              'data-view-mode': true,
               'data-align': true,
               'data-caption': true,
               alt: true,
diff --git a/core/modules/media/src/Form/EditorMediaDialog.php b/core/modules/media/src/Form/EditorMediaDialog.php
index fe7e07d5d4..d1da6307c8 100644
--- a/core/modules/media/src/Form/EditorMediaDialog.php
+++ b/core/modules/media/src/Form/EditorMediaDialog.php
@@ -184,11 +184,6 @@ public function buildForm(array $form, FormStateInterface $form_state, EditorInt
       '#access' => count($view_mode_options) >= 2,
     ];
 
-    // Store the default from the MediaEmbed filter, so that if the selected
-    // view mode matches the default, we can drop the 'data-view-mode'
-    // attribute.
-    $form_state->set('filter_default_view_mode', $media_embed_filter->settings['default_view_mode']);
-
     if ((empty($form['alt']) || $form['alt']['#access'] === FALSE) && $form['align']['#access'] === FALSE && $form['caption']['#access'] === FALSE && $form['view_mode']['#access'] === FALSE) {
       $format = $editor->getFilterFormat();
       $warning = $this->t('There is nothing to configure for this media.');
@@ -244,12 +239,6 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       $form_state->setValue(['attributes', 'alt'], FALSE);
     }
 
-    // If the selected view mode matches the default on the filter, remove the
-    // attribute.
-    if (!empty($form_state->get('filter_default_view_mode')) && $form_state->getValue(['attributes', 'data-view-mode']) === $form_state->get('filter_default_view_mode')) {
-      $form_state->setValue(['attributes', 'data-view-mode'], FALSE);
-    }
-
     if ($form_state->getErrors()) {
       unset($form['#prefix'], $form['#suffix']);
       $form['status_messages'] = [
diff --git a/core/modules/media/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php b/core/modules/media/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
index 3909303322..d13776215c 100644
--- a/core/modules/media/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
+++ b/core/modules/media/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
@@ -1265,7 +1265,7 @@ public function testViewMode() {
     $this->assertArrayHasKey('config', $dependencies);
     $this->assertSame($expected_config_dependencies, $dependencies['config']);
 
-    // Test that setting the view mode back to the default removes the
+    // Test that setting the view mode back to the default does not remove the
     // `data-view-mode` attribute.
     $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'drupal-media'));
     $page->pressButton('Edit media');
@@ -1278,7 +1278,7 @@ public function testViewMode() {
     $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'article.media--view-mode-view-mode-1'));
     $this->pressEditorButton('source');
     $this->assertNotEmpty($drupal_media = $this->getDrupalMediaFromSource());
-    $this->assertFalse($drupal_media->hasAttribute('data-view-mode'));
+    $this->assertTrue($drupal_media->hasAttribute('data-view-mode'));
 
     // Test that changing the view mode with an empty editable caption
     // preserves the empty editable caption when the preview reloads.
@@ -1289,7 +1289,7 @@ public function testViewMode() {
     $this->waitForEditor();
     $this->assignNameToCkeditorIframe();
     $this->getSession()->switchToIFrame('ckeditor');
-    // Wait for preview to load with default view mode.
+    // Wait for preview to load with designated view mode.
     $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'article.media--view-mode-view-mode-1'));
   }
 
diff --git a/core/modules/media_library/src/MediaLibraryEditorOpener.php b/core/modules/media_library/src/MediaLibraryEditorOpener.php
index 0c0af98b41..d3cce14b96 100644
--- a/core/modules/media_library/src/MediaLibraryEditorOpener.php
+++ b/core/modules/media_library/src/MediaLibraryEditorOpener.php
@@ -73,6 +73,18 @@ public function getSelectionResponse(MediaLibraryState $state, array $selected_i
         'data-align' => 'center',
       ],
     ];
+
+    // Set 'data-view-mode' attribute if a default view mode is configured
+    // for the filter format.
+    $filter_format = $this->filterStorage->load($state->getOpenerParameters()['filter_format_id']);
+    if ($filter_format && $filter_format->filters('media_embed')) {
+      $filter = $filter_format->filters('media_embed');
+      $default_view_mode = $filter->settings['default_view_mode'];
+      if ($default_view_mode) {
+        $values['attributes']['data-view-mode'] = $default_view_mode;
+      }
+    }
+
     $response->addCommand(new EditorDialogSave($values));
 
     return $response;
diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
index d30e1bbf78..244c18cb91 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\media_library\FunctionalJavascript;
 
 use Drupal\Component\Utility\Html;
+use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\editor\Entity\Editor;
 use Drupal\file\Entity\File;
 use Drupal\filter\Entity\FilterFormat;
@@ -212,6 +213,34 @@ public function testConfigurationValidation() {
    * Tests using DrupalMediaLibrary button to embed media into CKEditor.
    */
   public function testButton() {
+    EntityViewMode::create([
+      'id' => 'media.view_mode_1',
+      'targetEntityType' => 'media',
+      'status' => TRUE,
+      'enabled' => TRUE,
+      'label' => 'View Mode 1',
+    ])->save();
+    EntityViewMode::create([
+      'id' => 'media.view_mode_2',
+      'targetEntityType' => 'media',
+      'status' => TRUE,
+      'enabled' => TRUE,
+      'label' => 'View Mode 2',
+    ])->save();
+
+    $filter_format = FilterFormat::load('test_format');
+    $filter_format->setFilterConfig('media_embed', [
+      'status' => TRUE,
+      'settings' => [
+        'default_view_mode' => 'view_mode_1',
+        'allowed_media_types' => [],
+        'allowed_view_modes' => [
+          'view_mode_1' => 'view_mode_1',
+          'view_mode_2' => 'view_mode_2',
+        ],
+      ],
+    ])->save();
+
     $this->drupalGet('/node/add/blog');
     $this->waitForEditor();
     $this->pressEditorButton('drupalmedialibrary');
@@ -246,6 +275,7 @@ public function testButton() {
     $expected_attributes = [
       'data-entity-type' => 'media',
       'data-entity-uuid' => $this->media->uuid(),
+      'data-view-mode' => 'view_mode_1',
       'data-align' => 'center',
     ];
     foreach ($expected_attributes as $name => $expected) {
