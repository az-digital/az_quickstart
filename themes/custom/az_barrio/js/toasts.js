/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(Drupal => {
  function createAlert(type, messageText, id) {
    let alertClass = 'alert-info';
    let icon = '';
    switch (type) {
      case 'status':
        alertClass = 'alert-success';
        icon = '<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>';
        break;
      case 'warning':
        alertClass = 'alert-warning';
        icon = '<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>';
        break;
      case 'error':
        alertClass = 'alert-danger';
        icon = '<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>';
        break;
      default:
        alertClass = 'alert-info';
        icon = '<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg>';
    }
    const alertElement = document.createElement('div');
    alertElement.className = `alert ${alertClass} alert-dismissible fade show d-flex align-items-center`;
    alertElement.setAttribute('role', 'alert');
    if (id) {
      alertElement.setAttribute('data-drupal-message-id', id);
    }
    if (type) {
      alertElement.setAttribute('data-drupal-message-type', type);
    }
    alertElement.innerHTML = `${icon}<div>${messageText}</div>` + `<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
    return alertElement;
  }
  function createToast(type, messageText, id) {
    let icon = '';
    let heading = '';
    let autohide = 'true';
    let role = 'status';
    switch (type) {
      case 'status':
        icon = '<svg class="bi flex-shrink-0 me-2" width="20" height="20" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>';
        heading = 'Status message';
        autohide = 'true';
        role = 'status';
        break;
      case 'warning':
        icon = '<svg class="bi flex-shrink-0 me-2" width="20" height="20" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>';
        heading = 'Warning message';
        autohide = 'false';
        role = 'alert';
        break;
      case 'error':
        icon = '<svg class="bi flex-shrink-0 me-2" width="20" height="20" role="img" aria-label="Error:"><use xlink:href="#exclamation-triangle-fill"/></svg>';
        heading = 'Error message';
        autohide = 'false';
        role = 'alert';
        break;
      default:
        icon = '<svg class="bi flex-shrink-0 me-2" width="20" height="20" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg>';
        heading = 'Informative message';
        autohide = 'true';
        role = 'status';
    }
    const toastElement = document.createElement('div');
    toastElement.className = 'toast fade';
    toastElement.setAttribute('role', role);
    toastElement.setAttribute('aria-live', 'assertive');
    toastElement.setAttribute('aria-atomic', 'true');
    toastElement.setAttribute('data-bs-autohide', autohide);
    if (id) {
      toastElement.setAttribute('data-drupal-message-id', id);
    }
    if (type) {
      toastElement.setAttribute('data-drupal-message-type', type);
    }
    toastElement.innerHTML = `<div class="toast-header">${icon}<strong class="me-auto">${heading}</strong>` + `<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>` + `</div>` + `<div class="toast-body">${messageText}</div>`;
    setTimeout(function initializeToast() {
      let bsToast;
      if (typeof arizonaBootstrap !== 'undefined' && arizonaBootstrap.Toast) {
        bsToast = new arizonaBootstrap.Toast(toastElement);
        bsToast.show();
      } else if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
        bsToast = new bootstrap.Toast(toastElement);
        bsToast.show();
      }
    }, 100);
    return toastElement;
  }
  Drupal.theme = Drupal.theme || {};
  Drupal.theme.message = function messageTheme(message, options) {
    const {
      text
    } = message;
    const {
      type,
      id
    } = options;
    const existingToastContainer = document.querySelector('.toast-container[data-drupal-messages]');
    if (existingToastContainer) {
      return createToast(type, text, id);
    }
    return createAlert(type, text, id);
  };
  Drupal.behaviors.az_barrio_toast = {
    attach(context) {
      const elements = [].slice.call(context.querySelectorAll('.toast'));
      elements.forEach(function initializeToastElement(toastEl) {
        if (!toastEl.classList.contains('az-toast-initialized')) {
          toastEl.classList.add('az-toast-initialized');
          let toast;
          if (typeof arizonaBootstrap !== 'undefined' && arizonaBootstrap.Toast) {
            toast = new arizonaBootstrap.Toast(toastEl);
            toast.show();
          } else if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
            toast = new bootstrap.Toast(toastEl);
            toast.show();
          }
        }
      });
    }
  };
})(Drupal);
