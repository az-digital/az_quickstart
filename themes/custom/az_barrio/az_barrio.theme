<?php

/**
 * @file
 * Functions to support theming in the Arizona Barrio theme.
 */

//phpcs:ignore Security.BadFunctions.EasyRFI.WarnEasyRFI
include_once \Drupal::service('extension.list.theme')->getPath('az_barrio') . '/includes/common.inc';

use Drupal\block\Entity\Block;
use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function az_barrio_theme_suggestions_form_element_alter(&$suggestions, $variables) {
  if (isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'search_block_form') {
    $suggestions[] = 'form_element__form_id__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'] . '__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function az_barrio_theme_suggestions_form_element_label_alter(&$suggestions, $variables) {
  if (isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'search_block_form') {
    $suggestions[] = 'form_element_label__form-id__' . $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function az_barrio_theme_suggestions_input_alter(&$suggestions, $variables) {
  if ($variables['element']['#type'] == 'submit' && theme_get_setting('az_barrio_button')) {
    $suggestions[] = 'input__submit_button';
  }
  if (isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'search_block_form') {
    $suggestions[] = 'input__' . $variables['element']['#form_id'];
  }
  if (isset($variables['element']['#type']) && isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'search_block_form') {
    $suggestions[] = 'input__' . $variables['element']['#form_id'] . '__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function az_barrio_preprocess_form_element(array &$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
  if (isset($variables['type'])) {
    switch ($variables['type']) {
      case 'checkbox':
        $variables['customtype'] = theme_get_setting('az_barrio_checkbox');
        break;

      case 'radio':
        $variables['customtype'] = theme_get_setting('az_barrio_radio');
        break;

      default:
        break;
    }
  }

  if (isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'search_block_form') {
    $variables['label']['#form_id'] = $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_form_alter().
 */
function az_barrio_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if( $form_id === 'search_block_form') {
    az_barrio_attach_form_id($form, $form_id);
  }
}

/**
 * Attaches form id to all form elements.
 *
 * @param array $form
 *   The form or form element which children should have form id attached.
 * @param string $form_id
 *   The form id attached to form elements.
 */
function az_barrio_attach_form_id(&$form, $form_id) {
  if ($form_id === 'search_block_form') {
    foreach (Element::children($form) as $child) {
      if (!isset($form[$child]['#form_id'])) {
        $form[$child]['#form_id'] = $form_id;
      }
      az_barrio_attach_form_id($form[$child], $form_id);
    }
  }
}

/**
 * Implements hook_page_attachments_alter() for page templates.
 */
function az_barrio_page_attachments_alter(&$page) {
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}


/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds html classes based on AZ Barrio options.
 */
function az_barrio_preprocess_html(&$variables) {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  // Scroll Spy info added to body.
  if ($scroll_spy = theme_get_setting('az_barrio_scroll_spy')) {
    $variables['attributes']['data-target'] = $scroll_spy;
    $variables['attributes']['data-spy'] = "scroll";
  }

  // Page specific info.
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && isset($path_args[2]) &&
    $path_args[0] == 'taxonomy' && $path_args[1] == 'term') {
    $variables['attributes']['class'][] = 'page-taxonomy-term-' . $path_args[2];
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($path_args[2]);
    if (!empty($term)) {
      $vocabulary_id = $term->bundle();
      $variables['attributes']['class'][] = 'page-vocabulary-' . Html::cleanCssIdentifier($vocabulary_id);
    }
  }
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id) {
    $variables['attributes']['class'][] = 'page-view-' . Html::cleanCssIdentifier($view_id);
  }

  // SEO Information.
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];

  if (theme_get_setting('sticky_footer')) {
    $variables['html_attributes']->addClass('sticky-footer');
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function az_barrio_preprocess_page(&$variables, $hook) {
  $system_messages = theme_get_setting('az_barrio_system_messages');
  if ($system_messages) {
    $variables['#attached']['library'][] = 'az_barrio/' . $system_messages;
  }

  $content_width = 'col';
  $sidebar_first_width = 'col-md-' . theme_get_setting('az_barrio_sidebar_first_width');
  $sidebar_second_width = 'col-md-' . theme_get_setting('az_barrio_sidebar_second_width');

  // Define default classes for containers.
  $variables['navbar_top_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-top'],
  ];
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-main'],
  ];
  $variables['content_attributes'] = [
    'class' => ['main-content', $content_width],
    'id' => ['content'],
    'role' => ['main'],
  ];
  $variables['sidebar_first_attributes'] = [
    'class' => ['sidebar_first', 'sidebar', $sidebar_first_width],
    'id' => ['sidebar_first'],
  ];
  $variables['sidebar_second_attributes'] = [
    'class' => ['sidebar_second', 'sidebar', $sidebar_second_width],
    'id' => ['sidebar_second'],
  ];

  // Get custom Navbar classes from config and add them to Navbars.
  if (theme_get_setting('az_barrio_navbar_top_class') !== NULL) {
    $variables['navbar_top_attributes']['class'][] = theme_get_setting('az_barrio_navbar_top_class');
  }
  if (theme_get_setting('az_barrio_navbar_class') !== NULL) {
    $variables['navbar_attributes']['class'][] = theme_get_setting('az_barrio_navbar_class');
  }

  // Affix.
  $affix_navbar_top = theme_get_setting('az_barrio_navbar_top_affix');
  $affix_navbar = theme_get_setting('az_barrio_navbar_affix');
  $affix_sidebar_first = theme_get_setting('az_barrio_sidebar_first_affix');
  $affix_sidebar_second = theme_get_setting('az_barrio_sidebar_second_affix');
  if ($affix_navbar_top || $affix_navbar || $affix_sidebar_first || $affix_sidebar_second) {
    $variables['#attached']['library'][] = 'az_barrio/affix';
    if ($affix_navbar_top) {
      $variables['navbar_top_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_navbar) {
      $variables['navbar_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_first) {
      $variables['sidebar_first_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar_second) {
      $variables['sidebar_second_attributes']['data-toggle'] = 'affix';
    }
  }

  // Calculate widths.
  if (theme_get_setting('az_barrio_content_offset')) {
    $variables['content_attributes']['class'][] = 'offset-md-' . theme_get_setting('az_barrio_content_offset');
  }
  if (theme_get_setting('az_barrio_sidebar_first_offset')) {
    $variables['sidebar_first_attributes']['class'][] = 'offset-md-' . theme_get_setting('az_barrio_sidebar_first_offset');
  }
  if (theme_get_setting('az_barrio_sidebar_second_offset')) {
    $variables['sidebar_second_attributes']['class'][] = 'offset-md-' . theme_get_setting('az_barrio_sidebar_second_offset');
  }

  // Define column layout classes.
  switch (theme_get_setting('az_barrio_sidebar_position')) {
    case 'left':
      $variables['sidebar_first_attributes']['class'][] = 'order-first';
      $variables['content_attributes']['class'][] = 'order-last';
      break;

    case 'both':
      $variables['sidebar_first_attributes']['class'][] = 'order-first';
      $variables['sidebar_second_attributes']['class'][] = 'order-last';
      break;

    case 'right':
      $variables['content_attributes']['class'][] = 'order-first';
      $variables['sidebar_second_attributes']['class'][] = 'order-last';
      break;
  }

  // Define navigation position.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('az_barrio_navbar_top_position');
  $variables['navbar_attributes']['class'][] = theme_get_setting('az_barrio_navbar_position');

  // Define navigation color scheme.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('az_barrio_navbar_top_color');
  $variables['navbar_attributes']['class'][] = theme_get_setting('az_barrio_navbar_color');

  // Define navigation background classes.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('az_barrio_navbar_top_background');
  $variables['navbar_attributes']['class'][] = theme_get_setting('az_barrio_navbar_background');

  // Define navigation toggle size.
  switch (theme_get_setting('az_barrio_navbar_toggle')) {
    case 'navbar-toggleable-lg':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';
      break;

    case 'navbar-toggleable-md':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;

    case 'navbar-toggleable-sm':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-sm';
      break;

    case 'navbar-toggleable-xs':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xs';
      break;

    default:
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;
  }

  if (theme_get_setting('az_barrio_sidebar_collapse')) {
    $variables['content_attributes']['class'][] = 'sidebar-offcanvas';
    $variables['sidebar_collapse'] = TRUE;
    $variables['#attached']['library'][] = 'az_barrio/sidebar_collapse';
  }

  // Declare region attributes.
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);

  // Declare container layout.
  $variables['container_navbar'] = theme_get_setting('az_barrio_navbar_container');
  $variables['container'] = theme_get_setting('az_barrio_fluid_container') ? 'container-fluid' : 'container';


  $variables['az_barrio_navbar_offcanvas'] = (theme_get_setting('az_barrio_navbar_offcanvas')) ? TRUE : FALSE;
  if ($variables['az_barrio_navbar_offcanvas'] === TRUE) {
    $variables['#attached']['library'][] = 'az_barrio/az-barrio-off-canvas-nav';
    $variables['navbar_offcanvas_attributes'] = new Attribute([
      'id' => 'navbar-top',
      'class' => [
        'navbar-offcanvas'
      ]
    ]);
    if ($variables['page']['navigation']) {
      $variables['navbar_offcanvas_attributes']['class'][] = 'has-navigation-region';
    }
    else {
      $variables['navbar_offcanvas_attributes']['class'][] = 'no-navigation-region';
    }
    if ($variables['page']['navigation_offcanvas']) {
      $variables['navbar_offcanvas_attributes']['class'][] = 'has-off-canvas-region';
    }
    else {
      $variables['navbar_offcanvas_attributes']['class'][] = 'no-off-canvas-region';
    }
  }

  // Allow hiding of title of front page node.
  if (theme_get_setting('az_hide_front_title') === 1 && \Drupal::service('path.matcher')->isFrontPage()) {
    // $variables['title'] = FALSE;
  }

  // Check if land acknowledgment should be displayed.
  $land_acknowledgment = '';
  if (theme_get_setting('land_acknowledgment')) {
    $land_acknowledgment = '<p class="font-weight-light"><em>We respectfully acknowledge the University of Arizona is on the land and territories of Indigenous peoples. Today, Arizona is home to 22 federally recognized tribes, with Tucson being home to the O’odham and the Yaqui. Committed to diversity and inclusion, the University strives to build sustainable relationships with sovereign Native Nations and Indigenous communities through education offerings, partnerships, and community service.</em></p><hr>';
  }

  // Check if information security policy should be displayed.
  $info_security_privacy = '';
  if (theme_get_setting('info_security_privacy')) {
    $info_security_privacy = '<p class="small"><a href="https://www.arizona.edu/information-security-privacy" target="_blank">University Information Security and Privacy</a></p>';
  }

  // Determine what copyright notice to display.
  $copyright_notice = theme_get_setting('copyright_notice');
  $copyright_notice_format = '<p class="small">&copy; ' . date('Y') . ' %s</p>';
  if (!empty($copyright_notice)) {
    $copyright_notice = sprintf($copyright_notice_format, $copyright_notice);
  }
  else {
    $copyright_notice = sprintf($copyright_notice_format, 'The Arizona Board of Regents on behalf of <a href="https://www.arizona.edu" target="_blank">The University of Arizona</a>.');
  }

  $variables['logo'] = az_barrio_primary_logo();
  $variables['land_acknowledgment'] = Markup::create($land_acknowledgment);
  $variables['info_security_privacy'] = Markup::create($info_security_privacy);
  $variables['copyright_notice'] = Markup::create($copyright_notice);
  $variables['footer_logo'] = az_barrio_footer_logo();

  // Allow wordmark to be disabled.
  $variables['wordmark'] = (theme_get_setting('wordmark')) ? TRUE : FALSE;

  $variables['header_one_col_classes'] = theme_get_setting('header_one_col_classes');
  $variables['header_two_col_classes'] = theme_get_setting('header_two_col_classes');

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function az_barrio_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function az_barrio_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function az_barrio_preprocess_region(&$variables) {
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar_first',
    'sidebar_second',
  ];
  if (theme_get_setting('az_barrio_region_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['attributes']['class'][] = theme_get_setting('az_barrio_region_class_' . $variables['elements']['#region']);
  }
  elseif (!in_array($variables['elements']['#region'], $nowrap)) {
    $variables['attributes']['class'][] = 'row';
  }

}

/**
 * Implements hook_preprocess_HOOK() for select.html.twig.
 */
function az_barrio_preprocess_select(&$variables) {
  $variables['customtype'] = theme_get_setting('az_barrio_select');
}

/**
 * Implements hook_preprocess_HOOK() for file-managed-file.html.twig.
 */
function az_barrio_preprocess_file_managed_file(&$variables) {
  $variables['customtype'] = theme_get_setting('az_barrio_file');
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function az_barrio_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function az_barrio_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function az_barrio_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}

/**
 * Implements template_preprocess_table()
 */
function az_barrio_preprocess_table(&$variables) {
  $variables['table_class'] = theme_get_setting('az_barrio_table_style');
  $variables['hover'] = theme_get_setting('az_barrio_table_hover');
  $variables['thead_class'] = theme_get_setting('az_barrio_table_head');
}

/**
 * Implements template_preprocess_views_view_table()
 */
function az_barrio_preprocess_views_view_table(&$variables) {
  $variables['table_class'] = theme_get_setting('az_barrio_table_style');
  $variables['hover'] = theme_get_setting('az_barrio_table_hover');
  $variables['thead_class'] = theme_get_setting('az_barrio_table_head');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function az_barrio_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar_first',
    'sidebar_second',
  ];
  if (theme_get_setting('az_barrio_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $region_clean = theme_get_setting('az_barrio_region_clean_' . $variables['elements']['#region']);
  }
  else {
    $region_clean = in_array($variables['elements']['#region'], $nowrap);
  }
  if ($region_clean) {
    $suggestions[] = 'region__nowrap';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function az_barrio_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  // Define the view mode.
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $user_id = \Drupal::service('current_user')->id();
  $suggestions[] = 'user__' . $sanitized_view_mode;
  $suggestions[] = 'user__' . $user_id;
  $suggestions[] = 'user__' . $user_id . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page template.
 */
function az_barrio_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add a template suggestions for node type.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      /** @var \Drupal\node\NodeInterface $node */
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function az_barrio_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function az_barrio_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links.
  if (isset($variables['attributes']['class'])) {
    if (in_array('inline', $variables['attributes']['class'])) {
      $suggestions[] = 'links__inline';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for status messages templates.
 */
function az_barrio_theme_suggestions_status_messages_alter(array &$suggestions, array $variables) {
  switch (theme_get_setting('az_barrio_messages_widget')) {
    case 'toasts':
      $suggestions[] = 'status_messages__toasts';
      break;

    case 'alerts':
      $suggestions[] = 'status_messages__alerts';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for status_messages.
 */
function az_barrio_preprocess_status_messages(&$variables) {
  $variables['title_ids'] = [];
  foreach ($variables['message_list'] as $message_type => $messages) {
    $variables['title_ids'][$message_type] = Html::getUniqueId("message-$message_type-title");
  }
}

/**
 * Implements hook_preprocess_input() for adding classes to inputs.
 */
function az_barrio_preprocess_input(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
    $button_size = theme_get_setting('az_barrio_button_size');
    $button_types = [
      'btn-primary',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
    ];
    $button_sizes = ['btn-sm', 'btn-lg'];
    $button_is_outline = theme_get_setting('az_barrio_button_outline');
    if (is_object($variables['attributes']['class'])) {
      \Drupal::logger('az_barrio')->notice(implode($variables['attributes']['class']->value()));
      if (!in_array('btn', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('btn');
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']->value()))) {
        if ($button_is_outline) {
          $variables['attributes']['class']->addClass('btn-outline-primary');
        }
        else {
          $variables['attributes']['class']->addClass('btn-primary');
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']->value()))) {
        $variables['attributes']['class']->addClass($button_size);
      }
    }
    else {
      if (!in_array('btn', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'btn';
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']))) {
        if ($button_is_outline) {
          $variables['attributes']['class'][] = 'btn-outline-primary';
        }
        else {
          $variables['attributes']['class'][] = 'btn-primary';
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']))) {
        $variables['attributes']['class'][] = $button_size;
      }
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
    $variables['safe_value_label'] = Xss::filter($variables['attributes']['value']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function az_barrio_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_preprocess_HOOK() for image styles.
 */
function az_barrio_preprocess_image_style(&$variables) {
  if (!\Drupal::moduleHandler()->moduleExists('image_class')) {
    $variables['image']['#attributes']['class'][] = 'img-fluid';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for containers.
 */
function az_barrio_theme_suggestions_container_alter(array &$suggestions, array &$variables) {
  $suggestions = [];

  $element = $variables['element'];

  // We cannot count on template_preprocess_container having run, so we copy
  // its logic here to provide templates for forms (has parents) or not forms.
  // Special handling for form elements.
  if (isset($element['#array_parents'])) {
    $suggestions[] = 'container__has_parent';
  }
  else {
    $suggestions[] = 'container__no_parent';
  }

  if (isset($element['#type']) && $element['#type'] !== 'container') {
    $suggestions[] = 'container__' . $element['#type'];
  }
  if (isset($element['submit']) && isset($element['submit']['#form_id'])) {
    $suggestions[] = 'container__' . $element['submit']['#form_id'] . '__' .  $element['#type']  ;
  }
  if (isset($element['#type']) && $element['#type'] === 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
  if (isset($element['#type']) && $element['#type'] === 'view') {
    $suggestions[] = 'container__view__' . $element['#name'];
    $suggestions[] = 'container__view__' . $element['#name'] . '__' . $element['#display_id'];
  }
  elseif (isset($element['widget'][0]['#type']) && $element['widget'][0]['#type'] === 'managed_file') {
    $suggestions[] = 'container__file';
    $suggestions[] = 'container__file__' . $element['widget']['#field_name'];
  }

  // Additional module-specific container templates.
  if (isset($element['#group'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#group']);
  }

  if (isset($element['#webform_key'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#webform_key']);
  }
}

/**
 * Implements template_preprocess_maintenance_page().
 */
function az_barrio_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'az_barrio/maintenance_page';

  $variables['logo'] = az_barrio_primary_logo();
}

/**
 * Implements hook_library_info_alter().
 */
function az_barrio_library_info_alter(&$libraries, $extension) {
  if ($extension === 'bootstrap_barrio' && isset($libraries['global-styling'])) {
    // Remove node styles.
    unset($libraries['node']['css']['component']['css/components/node.css']);
    // Remove table styles.
    unset($libraries['global-styling']['css']['component']['css/components/table.css']);
    // Remove sidebar styles.
    unset($libraries['global-styling']['css']['component']['css/components/sidebar.css']);
    // Remove site-footer styles.
    unset($libraries['global-styling']['css']['component']['css/components/site-footer.css']);
  }
  if ($extension === 'az_barrio' && isset($libraries['arizona-bootstrap'])) {
    // Add AZ Bootstrap CSS & JS based on theme settings.
    $az_bootstrap_css_path = az_barrio_az_bootstrap_assets_path('css');
    $az_bootstrap_js_path = az_barrio_az_bootstrap_assets_path('js');
    if (!$az_bootstrap_css_path || !$az_bootstrap_js_path) {
      return;
    }

    $az_bootstrap_token = '';
    $az_bootstrap_css_info = [
      'media' => 'all',
      'preprocess' => FALSE,
      'browsers' => [
        'IE' => TRUE,
        '!IE' => TRUE,
      ],
      'minified' => FALSE,
    ];
    $az_bootstrap_js_info = [
      'preprocess' => FALSE,
    ];

    // AZ Bootstrap source.
    if (theme_get_setting('az_bootstrap_source') === 'cdn') {
      // AZ Bootstrap CDN version.
      if (theme_get_setting('az_bootstrap_cdn_version') !== 'stable') {
        $az_bootstrap_token = '?=' . \Drupal::state()->get('system.css_js_query_string') ?: '0';
      }
      $az_bootstrap_css_info['type'] = 'external';
      $az_bootstrap_js_info['type'] = 'external';
    }
    else {
      $az_bootstrap_css_info['type'] = 'file';
      $az_bootstrap_js_info['type'] = 'file';
    }

    if (theme_get_setting('az_bootstrap_minified')) {
      $az_bootstrap_css_info['minified'] = TRUE;
    }

    $az_bootstrap_css_path .= $az_bootstrap_token;
    $az_bootstrap_js_path .= $az_bootstrap_token;
    $libraries['arizona-bootstrap']['css']['theme'] = [
      $az_bootstrap_css_path => $az_bootstrap_css_info,
    ];
    $libraries['arizona-bootstrap']['js'] = [
      $az_bootstrap_js_path => $az_bootstrap_js_info,
    ];

    // Populate AZ Bootstrap location variable for CKEditor.
    \Drupal::state()->set(AZ_BOOTSTRAP_LOCATION, $az_bootstrap_css_path . $az_bootstrap_token);

    $font = theme_get_setting('az_barrio_font');
    if ($font === TRUE) {
      // Add Proxima Nova CSS based on theme settings.
      // Ensure Proxima Nova is loaded before Arizona Bootstrap.
      $libraries['arizona-bootstrap']['dependencies'][] = 'az_barrio/az-proxima-nova';
    }

    $material_design_sharp_icons = theme_get_setting('az_barrio_material_design_sharp_icons');
    if ($material_design_sharp_icons === TRUE) {
      // Add Material Design Sharp Icon CSS based on theme settings.
      // Ensure icon CSS is loaded before Arizona Bootstrap.
      $libraries['arizona-bootstrap']['dependencies'][] = 'az_barrio/material-design-icons-sharp';
    }

    $az_icons = theme_get_setting('az_barrio_az_icons');
    if ($az_icons === TRUE) {
      if ($extension === 'az_barrio' && isset($libraries['az-icons'])) {
        // Add Arizona Icons CSS based on theme settings.
        $az_icons_path = az_barrio_az_icons_assets_path('css');
        // Ensure icons are loaded before Arizona Bootstrap.
        $libraries['arizona-bootstrap']['dependencies'][] = 'az_barrio/az-icons';
        $az_barrio_az_icons_css_info = [
          'media' => 'all',
          'preprocess' => FALSE,
          'browsers' => [
            'IE' => TRUE,
            '!IE' => TRUE,
          ],
          'minified' => TRUE,
        ];
        // AZ Brand Icons source.
        if (theme_get_setting('az_barrio_az_icons_source') === 'cdn') {
          $az_barrio_az_icons_css_info['type'] = 'external';
        }
        else {
          $az_barrio_az_icons_css_info['type'] = 'file';
        }

        $libraries['az-icons']['css']['theme'] = [
          $az_icons_path => $az_barrio_az_icons_css_info,
        ];
      }
    }
  }
}

/**
 * Helper function for constructing AZ Bootstrap asset paths.
 */
function az_barrio_az_bootstrap_assets_path($type) {
  if (empty($type)) {
    return FALSE;
  }

  $az_bootstrap_path = '';

  // AZ Bootstrap source.
  if (theme_get_setting('az_bootstrap_source') === 'cdn') {
    $az_bootstrap_cdn_version = theme_get_setting('az_bootstrap_cdn_version');
    if ($az_bootstrap_cdn_version === 'stable') {
      $az_bootstrap_cdn_version = AZ_BOOTSTRAP_STABLE_VERSION;
    }
    $az_bootstrap_path = 'https://cdn.digital.arizona.edu/lib/arizona-bootstrap/' . $az_bootstrap_cdn_version;
  }
  else {
    $az_bootstrap_path = base_path() . 'libraries/arizona-bootstrap';
  }

  $az_bootstrap_path .= '/' . $type . '/arizona-bootstrap';

  // Use AZ Bootstrap Javascript bundle (contains Popper.js).
  if ($type === 'js') {
    $az_bootstrap_path .= '.bundle';
  }

  // AZ Bootstrap minified.
  if (theme_get_setting('az_bootstrap_minified')) {
    $az_bootstrap_path .= '.min';
  }

  return $az_bootstrap_path . '.' . $type;
}

/**
 * Helper function for constructing UA Brand Icons asset paths.
 */
function az_barrio_az_icons_assets_path($type) {
  $az_icons_path = '';

  // AZ Icons source.
  if (theme_get_setting('az_barrio_az_icons_source') === 'cdn') {
    $az_icons_path = 'https://cdn.digital.arizona.edu/lib/az-icons/' . AZ_ICONS_STABLE_VERSION . '/az-icons-styles.css';
  }
  else {
    $az_icons_path = 'libraries/az-icons/az-icons-styles.css';
  }

  return $az_icons_path;
}

/**
 * Helper function for the primary logo.
 */
function az_barrio_primary_logo() {
  $return = '';
  $primary_logo_link_classes = ['qs-site-logo', 'd-block'];
  $primary_logo_path = theme_get_setting('logo');
  $primary_logo_path_parts = pathinfo($primary_logo_path['path']);
  $primary_alt_text = theme_get_setting('primary_logo_alt_text');
  $primary_title_text = theme_get_setting('primary_logo_title_text');
  $config = \Drupal::config('az_barrio.settings');
  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $token_service = \Drupal::token();
    $primary_alt_text = $token_service->replace($primary_alt_text);
    $primary_title_text = $token_service->replace($primary_title_text);
  }

  // Set primary logo.
  if (!empty($primary_logo_path)) {

    // Inline SVG logo.
    if (theme_get_setting('az_barrio_logo_svg_inline') === TRUE && $primary_logo_path_parts['extension'] === 'svg') {
      $svg = file_get_contents(DRUPAL_ROOT . '/' . $primary_logo_path['url']);
      $rendered_image = \Drupal::service('renderer')->render($svg);
      $image_markup = Markup::create($rendered_image);
      $primary_logo_link_classes[] = 'qs-logo-svg-inline';
      $return = Link::createFromRoute($image_markup, '<front>', [], [
        'attributes' => [
          'title' => $primary_title_text,
          'class' => $primary_logo_link_classes,
          'rel' => 'home',
        ],
      ]
      );
    }
    else {
      $image_renderable = [
        '#theme' => 'image',
        '#uri' => $primary_logo_path['path'],
        '#alt' => $primary_alt_text,
        '#attributes' => [
          'class' => ['img-fluid'],
        ]
      ];
      $renderer = \Drupal::service('renderer');
      $renderer->addCacheableDependency($image_renderable, $config);
      $return = Link::createFromRoute($image_renderable,'<front>', [], [
        'attributes' => [
          'title' => $primary_title_text,
          'class' => $primary_logo_link_classes,
          'rel' => 'home',
        ],
      ]);
    }
  }

  return $return;
}

/**
 * Helper function for the secondary footer logo option.
 */

function az_barrio_footer_logo() {
  $return = '';
  $footer_logo_link_classes = ['qs-site-logo', 'd-block', 'mt-0'];
  $footer_logo_path = theme_get_setting('footer_logo_path');
  $footer_logo_default = theme_get_setting('footer_default_logo');
  $footer_logo_path_parts = pathinfo($footer_logo_path);
  $footer_link_destination = theme_get_setting('footer_logo_link_destination');
  $footer_alt_text = theme_get_setting('footer_logo_alt_text');
  $footer_title_text = theme_get_setting('footer_logo_title_text');
  $config = \Drupal::config('az_barrio.settings');
  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $token_service = \Drupal::token();
    $footer_alt_text = $token_service->replace($footer_alt_text);
    $footer_title_text = $token_service->replace($footer_title_text);
  }

  // Set footer logo.
  if (!empty($footer_logo_path) && !$footer_logo_default) {
    $footer_link_destination = (!empty($footer_link_destination)) ? $footer_link_destination : '<front>';
    $attr = [
      'attributes' => [
        'title' => $footer_title_text,
        'rel' => 'home',
        'class' => $footer_logo_link_classes,
      ],
    ];
    $filepath = \Drupal::service('file_system')->realpath($footer_logo_path);
    // Inline SVG logo.
    if (theme_get_setting('az_barrio_footer_logo_svg_inline') === TRUE && $footer_logo_path_parts['extension'] === 'svg') {
      $svg = file_get_contents($filepath);
      $rendered_image = \Drupal::service('renderer')->render($svg);
      $image_markup = Markup::create($rendered_image);
      $attr['attributes']['class'][] = 'qs-logo-svg-inline';
      // Footer link destination is empty (default value)
      if ($footer_link_destination === '<front>') {
        $return = Link::fromTextAndUrl($image_markup, Url::fromRoute($footer_link_destination, [], $attr));
      }
      // An external URL was entered
      else {
        $return = Link::fromTextAndUrl($image_markup, Url::fromUri($footer_link_destination, $attr));
      }
    }
    else {
      $image_renderable = [
        '#theme' => 'image',
        '#uri' => $footer_logo_path,
        '#alt' => $footer_alt_text,
        '#attributes' => [
          'class' => ['img-fluid'],
        ]
      ];
      $renderer = \Drupal::service('renderer');
      $renderer->addCacheableDependency($image_renderable, $config);
      // Footer link destination is empty (default value)
      if ($footer_link_destination === '<front>') {
        $return = Link::fromTextAndUrl($image_renderable, Url::fromRoute($footer_link_destination, [], $attr));
      }
      // An external URL was entered
      else {
        $return = Link::fromTextAndUrl($image_renderable, Url::fromUri($footer_link_destination, $attr));
      }
    }
  }
  // Fallback to primary logo when footer logo settings are not configured.
  else {
    $footer_logo = az_barrio_primary_logo();
    $footer_logo = $footer_logo->toRenderable();
    $footer_logo['#attributes']['class'][] = 'mt-0';
    $return = $footer_logo;
  }

  return $return;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function az_barrio_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Taken from http://kristiankaa.dk/article/drupal8-region-specific-menu-theme-hook-suggestion
  // az_barrio_preprocess_block(&$variables)
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }

  if (isset($variables['attributes']['id'])) {
    $blockid = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['id']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['attributes']['block'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for breadcrumb templates.
 */
function az_barrio_preprocess_breadcrumb(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('easy_breadcrumb')) {
    $add_home_class = FALSE;
    $config = \Drupal::config('easy_breadcrumb.settings');
    if ($config->get('include_home_segment')) {
      $add_home_class = TRUE;
    }

    foreach ($variables['breadcrumb'] as $key => &$item) {
      $item['classes'] = 'breadcrumb-item';
      if ($add_home_class && $key === 0) {
        $item['classes'] .= ' breadcrumb-item-home';
      }
      if (empty($item['url'])) {
        $item['classes'] .= ' active';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 *
 * Pass proper logo to the system branding block.
 *
 * Arizona Digital issue #1012.
 * Footer menu links styles, using default theme templates.
 */
function az_barrio_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_menu_block' && isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }

  if ($variables['base_plugin_id'] === 'system_branding_block') {
    if ($variables['configuration']['use_site_logo']) {
      $variables['site_logo'] = az_barrio_primary_logo();
    }
  }

  if (isset($variables['elements']['#base_plugin_id']) && $variables['elements']['#base_plugin_id'] === 'menu_block') {
    if (!empty($variables['elements']['#id'])) {
      $block = Block::load($variables['elements']['#id']);
      if (!empty($block)) {
        $region = $block->getRegion();
        // Default classes for footer region.
        if ($region === 'footer') {

          // Add classes to interior <li> elements and <a> elements.
          if (!empty($variables['elements']['content']['#items'])) {
            foreach ($variables['elements']['content']['#items'] as $key => $item) {

              // Merge existing url options with transparent.
              $options = $item['url']->getOptions();
              if (empty($options)) {
                $options = [];
              }
              $options['attributes']['class'][] = 'bg-transparent';
              $item['url']->setOptions($options);
            }
          }

          $variables['content']['#attributes']['class'][] = 'nav-utility';
          $variables['content']['#attributes']['class'][] = 'd-flex';
          $variables['content']['#attributes']['class'][] = 'justify-content-center';
          $variables['content']['#attributes']['class'][] = 'justify-content-sm-end';
          $variables['title_attributes']['class'][] = 'h6';
          $variables['title_attributes']['class'][] = 'mt-md-3';
          $variables['title_attributes']['class'][] = 'text-uppercase';
        }

        // Default classes for footer_sub regions.
        if ($region === 'footer_sub' || $region === 'footer_sub_menus') {

          // Footer topics menu has special split behavior.
          if (!empty($variables['derivative_plugin_id']) && $variables['derivative_plugin_id'] === 'az-footer-topics') {
            $variables['content']['#attributes']['class'][] = 'split-md-2-col';
          }

          // Add classes to interior <li> elements and <a> elements.
          if (!empty($variables['elements']['content']['#items'])) {
            foreach ($variables['elements']['content']['#items'] as $key => $item) {
              $item['attributes']->addClass('d-flex', 'px-0');

              // Merge existing url options with transparent.
              $options = $item['url']->getOptions();
              if (empty($options)) {
                $options = [];
              }
              $options['attributes']['class'][] = 'bg-transparent';
              $item['url']->setOptions($options);
            }
          }

          $variables['content']['#attributes']['class'][] = 'nav';
          $variables['content']['#attributes']['class'][] = 'flex-column';
          $variables['content']['#attributes']['class'][] = 'nav-utility';
          $variables['title_attributes']['class'][] = 'h6';
          $variables['title_attributes']['class'][] = 'mt-md-3';
          $variables['title_attributes']['class'][] = 'text-uppercase';
        }
      }
    }
  }
}
