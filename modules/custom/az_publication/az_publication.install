<?php

/**
 * @file
 * Install, update and uninstall functions for az_publication module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Utility\UpdateException;
use Drupal\node\Entity\Node;

/**
 * Install the new az_curated_views module (now required by az_publication).
 */
function az_publication_update_1020701() {
  \Drupal::service('module_installer')->install(['az_curated_views']);
}

/**
 * Update az_author entity name field length while not affecting data.
 */
function az_publication_update_1020702() {
  // The usual approach of updateFieldStorageDefinition() does not work here.
  // We do not want to touch existing data. UpdateFieldStorageDefinition()
  // will throw an exception operating on data that already exists.
  // Instead, we have to update the field storage definitions, the key-value
  // sql storage data, and the database schema to actually make the change.
  // The updates to the field storage and key-value information are to make sure
  // that drupal's stored definitions of the entity field match accurately.
  // @link https://www.drupal.org/docs/drupal-apis/update-api
  $field_name = 'name';
  $entity_type_id = 'az_author';
  // Match node entity's title length.
  // entity_autolabel is hardcoded to use this length in its truncation.
  $field_length = 255;

  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
  $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($entity_type_id);
  if (empty($base_field_definitions[$field_name])) {
    throw new UpdateException("The author name field is missing from the entity definition.");
  }
  $schema_repository->setLastInstalledFieldStorageDefinition($base_field_definitions[$field_name]);
  /** @var \Drupal\Core\Field\BaseFieldDefinition[] $field_storage_definitions */
  $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
  if (empty($field_storage_definitions[$field_name])) {
    throw new UpdateException("The author name field is missing from the storage defintion.");
  }
  $field_storage_definitions[$field_name]->setSetting('max_length', $field_length);
  // Seems needed so that the schema is available in field storage definition.
  $field_storage_definitions[$field_name]->getSchema();

  // Update the serialized schema property.
  // Normally this is a protected value so we must use reflection.
  $rc = new \ReflectionClass($field_storage_definitions[$field_name]);
  $schema_property = $rc->getProperty('schema');
  $schema_property->setAccessible(TRUE);
  $schema = $schema_property->getValue($field_storage_definitions[$field_name]);
  $schema['columns']['value']['length'] = $field_length;
  $schema_property->setValue($field_storage_definitions[$field_name], $schema);

  // Update the field definition in the last installed schema repository.
  $schema_repository->setLastInstalledFieldStorageDefinitions($entity_type_id, $field_storage_definitions);

  // Update the storage schema for the field in the key-value store.
  $key_value = \Drupal::keyValue('entity.storage_schema.sql');
  $key_name = $entity_type_id . '.field_schema_data.' . $field_name;
  $storage_schema = $key_value->get($key_name);
  // Update tables where the field is present.
  // Commonly this is az_author_field_data and az_author_field_revision.
  foreach (array_keys($storage_schema) as $table_name) {
    $storage_schema[$table_name]['fields'][$field_name]['length'] = $field_length;
  }
  $key_value->set($key_name, $storage_schema);

  // Update the actual database tables involving the field.
  // Commonly this is az_author_field_data and az_author_field_revision.
  // This is the actual schema change.
  $db = Database::getConnection();
  foreach ($storage_schema as $table_name => $table_schema) {
    $db->schema()->changeField($table_name, $field_name, $field_name, $table_schema['fields'][$field_name]);
  }

}

/**
 * Adds field_az_publication_mapped_type field.
 */
function az_publication_update_1021001() {
  $module_dir = \Drupal::service('extension.list.module')->getPath('az_publication');
  $module_path = $module_dir . '/config/install';
  // Create a new FileStorage object.
  $source_storage = new FileStorage($module_path);
  $config_factory = \Drupal::service('config.factory');
  // Install the az_publication_type entity type.
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $entity_type_definition = $entity_type_manager->getDefinition('az_publication_type');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type_definition);
  $entity_type_manager->clearCachedDefinitions();
  // If the field storage and field config are new, import them.
  if ($config_factory->get('field.storage.node.field_az_publication_mapped_type')->isNew()) {
    $field_storage_config = $source_storage->read('field.storage.node.field_az_publication_mapped_type');
    \Drupal::entityTypeManager()->getStorage('field_storage_config')->create($field_storage_config)->save();
  }
  if ($config_factory->get('field.field.node.az_publication.field_az_publication_mapped_type')->isNew()) {
    $field_config = $source_storage->read('field.field.node.az_publication.field_az_publication_mapped_type');
    \Drupal::entityTypeManager()->getStorage('field_config')->create($field_config)->save();
  }
  // Clear caches after importing the configurations.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

}

/**
 * Map and move data from static text field to dynamic type reference field.
 */
function az_publication_update_1021002(&$sandbox) {
  // Initialize or retrieve the batch progress information.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_node'] = 0;

    // Query all node IDs of type 'az_publication'.
    $sandbox['nids'] = \Drupal::entityQuery('node')
      ->condition('type', 'az_publication')
      ->accessCheck(FALSE)
      ->execute();

    $sandbox['max'] = count($sandbox['nids']);
  }

  // Define the mapping from old field values to new config entity IDs.
  $mapping = [
    'article' => 'az_article',
    'article-journal' => 'az_article_journal',
    'article-magazine' => 'az_article_magazine',
    'article-newspaper' => 'az_article_newspaper',
    'bill' => 'az_bill',
    'book' => 'az_book',
    'broadcast' => 'az_broadcast',
    'chapter' => 'az_chapter',
    'classic' => 'az_classic',
    'collection' => 'az_collection',
    'dataset' => 'az_dataset',
    'document' => 'az_document',
    'entry' => 'az_entry',
    'entry-dictionary' => 'az_entry_dictionary',
    'entry-encyclopedia' => 'az_entry_encyclopedia',
    'event' => 'az_event',
    'figure' => 'az_figure',
    'graphic' => 'az_graphic',
    'hearing' => 'az_hearing',
    'interview' => 'az_interview',
    'legal_case' => 'az_legal_case',
    'legislation' => 'az_legislation',
    'manuscript' => 'az_manuscript',
    'map' => 'az_map',
    'motion_picture' => 'az_motion_picture',
    'musical_score' => 'az_musical_score',
    'pamphlet' => 'az_pamphlet',
    'paper-conference' => 'az_paper_conference',
    'patent' => 'az_patent',
    'performance' => 'az_performance',
    'periodical' => 'az_periodical',
    'personal_communication' => 'az_personal_communication',
    'post' => 'az_post',
    'post-weblog' => 'az_post_weblog',
    'regulation' => 'az_regulation',
    'report' => 'az_report',
    'review' => 'az_review',
    'review-book' => 'az_review_book',
    'software' => 'az_software',
    'song' => 'az_song',
    'speech' => 'az_speech',
    'standard' => 'az_standard',
    'thesis' => 'az_thesis',
    'treaty' => 'az_treaty',
    'webpage' => 'az_webpage',
  ];

  // Process nodes in batches.
  // Number of nodes to process per batch.
  $limit = 50;
  $nids_slice = array_slice($sandbox['nids'], $sandbox['progress'], $limit);
  $nodes = Node::loadMultiple($nids_slice);
  $time = \Drupal::service('datetime.time');

  foreach ($nodes as $node) {
    if ($node->hasField('field_az_publication_type') && !$node->get('field_az_publication_type')->isEmpty()) {
      $old_value = $node->get('field_az_publication_type')->value;
      $new_value = $mapping[$old_value];

      // Map and update the new entity reference field.
      if (isset($mapping[$old_value])) {
        $node->set('field_az_publication_mapped_type', ['target_id' => $mapping[$old_value]]);
        $node->setNewRevision(TRUE);
        $node->isDefaultRevision(TRUE);
        // Construct a detailed message.
        $revision_log_message = sprintf(
          "Publication type updated from '%s' to '%s' as part of data migration to a customizable type reference field. For more information about how to use this feature, see https://quickstart.arizona.edu/node/220",
          $old_value,
          $new_value
        );
        $node->setRevisionLogMessage($revision_log_message);
        $node->setRevisionCreationTime($time->getRequestTime());
        $node->setRevisionUserId(1);
        $node->save();
      }
    }

    $sandbox['progress']++;
    $sandbox['current_node'] = $node->id();
  }

  // Inform the batch API about the progress.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Helper function to return batch info.
 */
function az_publication_batch_info() {
  return [
    'title' => t('Updating AZ Publication Nodes...'),
    'operations' => [
      ['az_publication_update_1020902', []],
    ],
    'finished' => 'az_publication_batch_finished',
  ];
}

/**
 * Finished callback for the batch.
 */
function az_publication_batch_finished($success, $results, $operations) {
  $messenger = \Drupal::messenger();

  if ($success) {
    $message = \Drupal::translation()->formatPlural(count($results),
      'One publication successfully processed.', '@count publications successfully processed.');
  }
  else {
    // Handle the case where the batch did not complete successfully.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', [
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE),
    ]);
  }

  $messenger->addMessage($message);
}

/**
 * Adds field_az_contributors field.
 */
function az_publication_update_1021301() {
  $module_dir = \Drupal::service('extension.list.module')->getPath('az_publication');
  $module_path = $module_dir . '/config/install';
  // Create a new FileStorage object.
  $source_storage = new FileStorage($module_path);
  $config_factory = \Drupal::service('config.factory');
  // Install the az_publication_type entity type.
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $entity_type_definition = $entity_type_manager->getDefinition('az_publication_type');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type_definition);
  $entity_type_manager->clearCachedDefinitions();
  // If the field storage and field config are new, import them.
  if ($config_factory->get('field.storage.node.field_az_contributors')->isNew()) {
    $field_storage_config = $source_storage->read('field.storage.node.field_az_contributors');
    \Drupal::entityTypeManager()->getStorage('field_storage_config')->create($field_storage_config)->save();
  }
  if ($config_factory->get('field.field.node.az_publication.field_az_contributors')->isNew()) {
    $field_config = $source_storage->read('field.field.node.az_publication.field_az_contributors');
    \Drupal::entityTypeManager()->getStorage('field_config')->create($field_config)->save();
  }
  // Clear caches after importing the configurations.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

}

/**
 * Remap authors to have role assignments.
 */
function az_publication_update_1021302(&$sandbox) {
  // Initialize or retrieve the batch progress information.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_node'] = 0;

    // Query all node IDs of type 'az_publication'.
    $sandbox['nids'] = \Drupal::entityQuery('node')
      ->condition('type', 'az_publication')
      ->accessCheck(FALSE)
      ->execute();

    $sandbox['max'] = count($sandbox['nids']);
  }

  // Process nodes in batches.
  // Number of nodes to process per batch.
  $limit = 50;
  $nids_slice = array_slice($sandbox['nids'], $sandbox['progress'], $limit);
  $nodes = Node::loadMultiple($nids_slice);
  $time = \Drupal::service('datetime.time');

  foreach ($nodes as $node) {
    if ($node->hasField('field_az_authors') && !$node->get('field_az_authors')->isEmpty() &&
      $node->hasField('field_az_contributors') && $node->get('field_az_contributors')->isEmpty()) {
      $old_value = $node->get('field_az_authors')->getValue();
      $new_value = [];
      // Remapped contributors are (by definition) authors.
      // Previously this was the only assignment that existed.
      // Target_ids go unchanged.
      foreach ($old_value as $item) {
        $item['role'] = 'author';
        $new_value[] = $item;
      }

      // Update the new contributor entity role references.
      if (!empty($new_value)) {
        // @todo should authors be removed?
        $node->set('field_az_contributors', $new_value);
        $node->setNewRevision(TRUE);
        $node->isDefaultRevision(TRUE);
        // Construct a detailed message.
        $revision_log_message = "Publication authors remapped to contributors.";
        $node->setRevisionLogMessage($revision_log_message);
        $node->setRevisionCreationTime($time->getRequestTime());
        $node->setRevisionUserId(1);
        $node->save();
      }
    }

    $sandbox['progress']++;
    $sandbox['current_node'] = $node->id();
  }

  // Inform the batch API about the progress.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Apply Bootstrap 5 compatibility updates to publication abstract fields.
 */
function az_publication_update_1130001(&$sandbox) {
  if (!isset($sandbox['ids'])) {
    $query = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getQuery()
      ->condition('type', 'az_publication')
      ->condition('field_az_publication_abstract.format', ['az_standard', 'full_html'], 'IN')
      ->exists('field_az_publication_abstract')
      ->accessCheck(FALSE);

    $sandbox['ids'] = $query->execute();
    $sandbox['max'] = count($sandbox['ids']);
  }

  return \Drupal::service('az_core.content_field_updater')
    ->processFieldUpdates(
      'node',
      'field_az_publication_abstract',
      'Drupal\az_core\Utility\AZBootstrapMarkupConverter::compareProcessor',
      $sandbox,
      [
        'create_revisions' => TRUE,
        'prefix' => __FUNCTION__,
        'suffix' => 'for Bootstrap 5 compatibility',
        'bundle_name' => 'az_publication',
      ]
    );
}
