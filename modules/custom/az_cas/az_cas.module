<?php

/**
 * @file
 * Contains az_cas.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function az_cas_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the az_cas module.
    case 'help.page.az_cas':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Pre-configures contrib CAS module to work with University of Arizona WebAuth.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Restrict assignable roles in 'Add CAS User(s)' form when Role Delegation
 * module is enabled.
 */
function az_cas_form_bulk_add_cas_users_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::moduleHandler()->moduleExists('role_delegation')) {
    $options = \Drupal::service('delegatable_roles')->getAssignableRoles(\Drupal::currentUser());
    foreach ($options as $key => $value) {
      $options[$key] = HTML::escape($value);
    }
    $form['roles']['#options'] = $options;
    $form['#validate'][] = 'az_cas_validate_roles';
  }
}

/**
 * Custom validation callback for Add CAS User(s) form.
 *
 * Ensures only assignable roles are assigned.
 */
function az_cas_validate_roles(array &$form, FormStateInterface $form_state) {
  $submitted_roles = array_filter($form_state->getValue('roles'));
  unset($submitted_roles[RoleInterface::AUTHENTICATED_ID]);
  $submitted_roles = array_keys($submitted_roles);
  $allowed_roles = \Drupal::service('delegatable_roles')->getAssignableRoles(\Drupal::currentUser());
  $allowed_roles = array_keys($allowed_roles);

  $valid_roles = TRUE;
  foreach ($submitted_roles as $role) {
    if (!in_array($role, $allowed_roles)) {
      $valid_roles = FALSE;
    }
  }

  if (!$valid_roles) {
    $form_state->setErrorByName(
      'roles',
      t('You do not have permission to assign all of the submitted roles.')
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the user login form to put CAS login below Drupal login.
 */
function az_cas_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $cas_config = \Drupal::config('cas.settings');
  $az_cas_config = \Drupal::config('az_cas.settings');

  // Cached form must be busted if we alter AZ CAS settings.
  $form['#cache']['tags'] = array_merge($form['#cache']['tags'], $az_cas_config->getCacheTags());

  // Adjust the weight of the CAS login link (if enabled).
  $login_link_enabled = $cas_config->get('login_link_enabled');
  if ($login_link_enabled) {
    $form['cas_login_link']['#weight'] = 100;
  }

  $disable_login_form = $az_cas_config->get('disable_login_form');
  if ($disable_login_form) {
    $form_elements = ['name', 'pass', 'actions'];
    foreach ($form_elements as $element) {
      $form[$element]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Modify the hook load order.
 */
function az_cas_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'form_alter' && isset($implementations['az_cas'])) {

    // Move az_cas_form_alter() to the end of the list.
    // \Drupal::moduleHandler()->getImplementations()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['az_cas'];
    unset($implementations['az_cas']);
    $implementations['az_cas'] = $group;
  }
}
