/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function ($, Drupal, window, document, once) {
  Drupal.azSelectMenu = Drupal.azSelectMenu || {};
  Drupal.behaviors.azSelectMenu = {
    attach: function attach(context, settings) {
      for (var i = 0; i < settings.azSelectMenu.ids.length; i++) {
        var selectFormId = settings.azSelectMenu.ids[i];
        var selectForm = document.querySelector("#".concat(selectFormId));
        once("azSelectMenu", selectForm, context).forEach(function (element) {
          $(element).popover();
          element.addEventListener("focus", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          element.addEventListener("change", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          element.addEventListener("mouseenter", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          var button = element.querySelector("button");
          button.addEventListener("click", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          button.addEventListener("touchstart", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          button.addEventListener("mouseenter", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          button.addEventListener("mouseleave", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          button.addEventListener("focus", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          button.addEventListener("blur", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          document.addEventListener("touchstart", function (event) {
            Drupal.azSelectMenu.handleEvents(event);
          });
          element.classList.add("processed");
        });
      }
    }
  };

  Drupal.azSelectMenu.handleEvents = function (event) {
    if (event.type === "touchstart") {
      if (event.target.classList.contains("js_select_menu_button")) {
        event.stopPropagation();
      } else {
        $(".az-select-menu").popover("hide");
        return;
      }
    }

    var selectForm = event.target.closest("form");
    var $selectForm = $(selectForm);
    var selectElement = selectForm.querySelector("select");

    var _selectElement$select = _slicedToArray(selectElement.selectedOptions, 1),
        optionsSelected = _selectElement$select[0];

    var selectElementHref = optionsSelected.dataset.href;
    var button = selectForm.querySelector("button");

    if (selectElementHref !== "") {
      $selectForm.popover("hide");
      button.classList.remove("disabled");
      button.setAttribute("aria-disabled", "false");

      switch (event.type) {
        case "click":
          event.stopImmediatePropagation();
          window.location = selectElementHref;
          break;

        default:
          break;
      }
    } else {
      button.classList.add("disabled");
      button.setAttribute("aria-disabled", "true");
      selectElement.setAttribute("aria-disabled", "true");

      switch (event.type) {
        case "click":
          if (event.target.classList.contains("js_select_menu_button")) {
            $selectForm.popover("show");
            selectElement.focus();
          }

          break;

        case "focus":
        case "mouseenter":
          if (event.target.classList.contains("js_select_menu_button")) {
            $selectForm.popover("show");
          } else {
            $selectForm.popover("hide");
          }

          break;

        case "mouseleave":
          $selectForm.popover("hide");
          break;

        default:
          break;
      }
    }
  };
})(jQuery, Drupal, this, this.document, once);