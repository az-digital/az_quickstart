<?php

/**
 * @file
 * Contains az_finder.module.
 */

use Drupal\Core\Routing\RouteCollection;

/**
 * Implements hook_theme().
 */
function az_finder_theme($existing, $type, $theme, $path) {
  return [
    'az_finder_widget' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for az_finder_widget.
 */
function template_preprocess_az_finder_widget(&$variables) {
  // Check if the class exists.
  if (class_exists('\Drupal\az_finder\Plugin\better_exposed_filters\filter\AZFinderTaxonomyIndexTidWidget')) {
    // Create an instance of the AzFinderTaxonomyIndexTidWidget class.
    $widget = \Drupal::service('plugin.manager.better_exposed_filters_filter_widget')
      ->createInstance('az_finder_tid_widget', []);
    // Call the preprocessAzFinderTaxonomyIndexTidWidget method with variables.
    try {
      $widget->preprocessAzFinderTaxonomyIndexTidWidget($variables);
    }
    catch (\Exception $e) {
      // Log any errors.
      \Drupal::logger('az_finder')->error('Error in preprocessAzFinderWidget: @message', ['@message' => $e->getMessage()]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for views_view.
 */
function az_finder_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  if (empty($view->display_handler->options['exposed_form']['type']) ||
      $view->display_handler->options['exposed_form']['type'] !== 'az_better_exposed_filters') {
    return;
  }
  if (!empty($view->display_handler->options['exposed_form']['options'])) {
    $options = $view->display_handler->options['exposed_form']['options'];
    if ($options['skip_link'] === TRUE) {
      $skip_link_id = $options['skip_link_id'] ?? 'search-filters';
      $skip_link_text = $options['skip_link_text'] ?? 'Skip to search and filter';
      $skip_to_filter = [
        '#type' => 'html_tag',
        '#tag' => 'a',
        '#value' => $skip_link_text,
        '#attributes' => [
          'href' => '#' . $skip_link_id,
          'class' => [
            'visually-hidden',
            'focusable',
            'skip-link',
          ],
        ],
      ];

      $variables['header'][] = $skip_to_filter;
    }
  }

}

/**
 * Implements hook_routing_alter().
 */
function az_finder_routing_alter(RouteCollection $collection) {
  $views_usage_checker = \Drupal::service('az_finder.views_usage_checker');
  $views_using_widget = $views_usage_checker->getViewsUsingWidget();
  foreach ($views_using_widget as $view_id => $displays) {
    foreach ($displays as $display_id) {
      $route_name = "az_finder.{$view_id}_{$display_id}";
      $path = "/admin/structure/views/view/{$view_id}/edit/{$display_id}";
      $route = (new Route($path))
        ->setDefault('_controller', 'Drupal\az_finder\Controller\YourController::yourMethod')
        ->setRequirement('_permission', 'administer views');
      $collection->add($route_name, $route);
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function az_finder_menu_links_discovered_alter(&$links) {
  $views_usage_checker = \Drupal::service('az_finder.views_usage_checker');
  $views_using_widget = $views_usage_checker->getViewsUsingWidget();
  foreach ($views_using_widget as $view_id => $displays) {
    foreach ($displays as $display_id) {
      $menu_link_id = "az_finder.{$view_id}_{$display_id}";
      $links[$menu_link_id] = [
        'title' => 'Your Dynamic Link Title',
        'route_name' => "az_finder.{$view_id}_{$display_id}",
        // Additional menu link options as needed.
      ];
    }
  }
}

/**
 *
 */
function az_finder_local_tasks_alter(array &$local_tasks, $route_match) {
  // \Drupal::logger('az_finder')->notice('RouteMatch type: @type', ['@type' => is_object($route_match) ? get_class($route_match) : gettype($route_match)]);
  // Ensure RouteMatchInterface is correctly hinted if debugging doesnâ€™t reveal issues.
}

// /**
//  * Implements hook_local_tasks_alter().
//  */
// function az_finder_local_tasks_alter(array &$local_tasks, RouteMatchInterface $route_match) {
//   // Get the current route name to check if we are on the desired page.
//   $route_name = $route_match->getRouteName();
// // Only add tabs if we are on the az_finder settings page or its sub-tabs.
//   if ($route_name === 'az_finder.settings' || strpos($route_name, 'az_finder.settings.') === 0) {
//     $views_usage_checker = \Drupal::service('az_finder.views_usage_checker');
//     $views_using_widget = $views_usage_checker->getViewsUsingWidget();
// foreach ($views_using_widget as $view_id => $display_ids) {
//       foreach ($display_ids as $display_id) {
//         // Construct a dynamic route name for each tab. This assumes you have corresponding routes defined.
//         $dynamic_route_name = "az_finder.settings.$view_id.$display_id";.
// // Construct a unique task id for each tab.
//         $task_id = "az_finder.settings.$view_id.$display_id.tab";
// // Add the local task.
//         $local_tasks[$task_id] = [
//           'title' => "$view_id $display_id", // Customize the title as needed.
//           'route_name' => $dynamic_route_name,
//           'parent_id' => 'az_finder.settings_tab', // Ensure this is the correct parent tab ID.
//           'base_route' => 'az_finder.settings', // This should be the base route for your settings page.
//         ];
//       }
//     }
//   }
// }
