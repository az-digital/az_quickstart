/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (drupalSettings) {
  document.addEventListener('DOMContentLoaded', function () {
    var filterContainer = document.querySelector('.az-bef-vertical');
    if (!filterContainer) return;
    var clearAllButton = filterContainer.querySelector('.js-finder-clear-all');
    var filterCountDisplay = clearAllButton.querySelector('.js-finder-filter-count');
    var searchInputField = filterContainer.querySelector('input[name="search"]');
    var svgLevel0ReplaceButtons = filterContainer.querySelectorAll('.js-svg-replace-level-0');
    var svgLevel1ReplaceButtons = filterContainer.querySelectorAll('.js-svg-replace-level-1');
    var accordionButtons = filterContainer.querySelectorAll('.collapser');
    var _drupalSettings$azFin = drupalSettings.azFinder,
      _drupalSettings$azFin2 = _drupalSettings$azFin.minSearchLength,
      minSearchLength = _drupalSettings$azFin2 === void 0 ? 1 : _drupalSettings$azFin2,
      icons = _drupalSettings$azFin.icons;
    function toggleSVG(container, level) {
      var isExpanded = container.getAttribute('aria-expanded') === 'true';
      var newSVGMarkup;
      if (level === 0) {
        newSVGMarkup = isExpanded ? icons.level_0_expand : icons.level_0_collapse;
      } else {
        newSVGMarkup = isExpanded ? icons.level_1_expand : icons.level_1_collapse;
      }
      container.querySelector('svg').outerHTML = newSVGMarkup;
    }
    svgLevel0ReplaceButtons.forEach(function (button) {
      button.addEventListener('click', function () {
        return toggleSVG(button, 0);
      });
    });
    svgLevel1ReplaceButtons.forEach(function (button) {
      button.addEventListener('click', function () {
        return toggleSVG(button, 1);
      });
    });
    var updateActiveFilterDisplay = function updateActiveFilterDisplay() {
      var activeCheckboxes = filterContainer.querySelectorAll('input[type="checkbox"]:checked');
      var activeFilterCount = activeCheckboxes.length;
      if (searchInputField.value.trim().length >= minSearchLength) {
        activeFilterCount += 1;
      }
      filterCountDisplay.textContent = "(".concat(activeFilterCount, ")");
      if (activeFilterCount > 0 && clearAllButton.classList.contains('d-none')) {
        clearAllButton.classList.remove('d-none');
      } else if (activeFilterCount === 0 && !clearAllButton.classList.contains('d-none')) {
        clearAllButton.classList.add('d-none');
      }
    };
    function deselectAllCheckboxes(event, filterContainer) {
      event.preventDefault();
      var checkboxes = filterContainer.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(function (checkbox) {
        return checkbox.checked = false;
      });
      updateActiveFilterDisplay();
    }
    function clearSearchInput(event, searchInputField) {
      searchInputField.value = '';
    }
    function resetAllFilters(event, searchInputField, filterContainer) {
      clearSearchInput(event, searchInputField);
      deselectAllCheckboxes(event, filterContainer);
      filterContainer.querySelector('.js-form-submit').click();
      event.preventDefault();
    }
    filterContainer.addEventListener('change', function (event) {
      if (event.target && (event.target.type === 'checkbox' || event.target === searchInputField)) {
        updateActiveFilterDisplay();
      }
    });
    clearAllButton.addEventListener('click', function (event) {
      resetAllFilters(event, searchInputField, filterContainer);
    });
    searchInputField.addEventListener('input', updateActiveFilterDisplay);
    var handleAccordionButtonKeydown = function handleAccordionButtonKeydown(event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        event.currentTarget.click();
      }
    };
    accordionButtons.forEach(function (button) {
      button.addEventListener('keydown', handleAccordionButtonKeydown);
    });
    updateActiveFilterDisplay();
  });
})(drupalSettings);