<?php

/**
 * @file
 * Contains az_event_trellis.module.
 */

use Drupal\az_event_trellis\TrellisHelper;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter() for node_az_event_edit_form.
 *
 * Adds warning message and disables event detail form elements on events
 * imported from Trellis Events.
 */
function az_event_trellis_form_node_az_event_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityFormInterface) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $form_object->getEntity();
    $trellis_id = $node->get('field_az_trellis_id')->getString();
    if (!empty($trellis_id)) {
      $trellis_link_url = TrellisHelper::$eventViewBasePath . $trellis_id . '/view';
      $trellis_warning = t('This event has been imported from Trellis Events. Event details can only be edited by a Trellis user <a href="@trellis-url">in Trellis Events</a>.', [
        '@trellis-url' => $trellis_link_url,
      ]);
      \Drupal::messenger()->addWarning($trellis_warning);

      $disabled_fields = [
        'title',
        'field_az_location',
        'field_az_event_date',
        'field_az_link',
        'field_az_summary',
        'field_az_photos',
      ];
      foreach ($disabled_fields as $field) {
        $form[$field]['#disabled'] = TRUE;
      }

      $no_access_fields = [
        'field_az_subheading',
        'field_az_body',
        'field_az_contacts',
        'field_az_attachments',
      ];
      foreach ($no_access_fields as $field) {
        $form[$field]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function az_event_trellis_migration_plugins_alter(array &$migrations) {

  if (!empty($migrations['az_trellis_events'])) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'az_event')
      ->exists('field_az_trellis_id');
    $nids = $query->execute();
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $nodes = $node_storage->loadMultiple($nids);

    $event_api_urls = [];
    foreach ($nodes as $n) {
      $event_api_urls[] = \Drupal::service('az_event_trellis.trellis_helper')->getEventUrl($n->get('field_az_trellis_id')->getString());
    }

    if (!empty($migrations['az_trellis_events']['source']) && empty($migrations['az_trellis_events']['source']['urls'])) {
      // $migrations['az_trellis_events']['source']['urls'] = $event_api_urls;
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo Refactor as views filter plugins with configuration.
 */
function az_event_trellis_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only run on trellis import view.
  if ($form_state->get('view')->id() === 'az_event_trellis_import') {
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    // Gather list of attribute terms.
    $terms = $storage->loadTree('az_enterprise_attributes', 0, 1, TRUE);
    $options = [];
    foreach ($terms as $term) {
      if ($term->hasField('field_az_attribute_key') && !empty($term->field_az_attribute_key->value)) {
        $key = $term->field_az_attribute_key->value;
        $children = $storage->getChildren($term);
        // Compute option lists nested based on attribute keys.
        foreach ($children as $child) {
          if ($child->hasField('field_az_attribute_key') && !empty($child->field_az_attribute_key->value)) {
            $options[$key][$child->field_az_attribute_key->value] = t($child->getName());
          }
        }
      }
    }
    // Match API filters to attribute keys.
    $filters = [
      'property_1' => 'Audiences__c',
      'property_2' => 'Topic__c',
      'property_3' => 'Category1__c',
      'property_4' => 'Event_Format__c',
    ];
    // Modify text remote data filters to option lists.
    foreach ($filters as $filter_key => $attribute_key) {
      if (!empty($form[$filter_key])) {
        if (!empty($options[$attribute_key])) {
          $form[$filter_key]['#type'] = 'select';
          $form[$filter_key]['#options'] = $options[$attribute_key];
          $form[$filter_key]['#empty_value'] = '';
          $form[$filter_key]['#required'] = FALSE;
        }
        else {
          // If no valid options for a filter, hide it.
          $form[$filter_key]['#access'] = FALSE;
        }
      }
    }
  }
}
