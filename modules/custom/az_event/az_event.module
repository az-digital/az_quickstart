<?php

/**
 * @file
 * Contains az_event.module.
 */

use Drupal\node\Entity\NodeType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function az_event_theme($existing, $type, $theme, $path) {
  return [
    'field__node__az_event' => [
      'template' => 'field--node--az-event',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function az_event_entity_extra_field_info() {
  $extra = [];

  // Check to see if our content type exists.
  $bundle = NodeType::load('az_event');
  if ($bundle) {
    // Month pseudo field.
    $extra['node'][$bundle->id()]['display']['az_event_month'] = [
      'label' => t('Event Month'),
      'description' => "This is a pseudo field from az_event.",
      'weight' => 50,
      'visible' => FALSE,
    ];

    // Day pseudo field.
    $extra['node'][$bundle->id()]['display']['az_event_day'] = [
      'label' => t('Event Day'),
      'description' => "This is a pseudo field from az_event.",
      'weight' => 50,
      'visible' => FALSE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_preprocess_field().
 */
function az_event_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  if ($element['#field_name'] === 'field_az_event_category') {
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'badge badge-link badge-light float-left mr-2 mb-2';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function az_event_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // We only know what to do with event pseudo fields if our date seems defined.
  if ($entity->hasField('field_az_event_date') && !empty($entity->field_az_event_date->value)) {
    $timestamp = $entity->field_az_event_date->value;
    $formatter = \Drupal::service('date.formatter');

    // Use the date.formatter service.
    if ($formatter) {
      // Month pseudo field.
      if ($display->getComponent('az_event_month')) {
        $build['az_event_month'][] = [
          '#type' => 'markup',
          '#markup' => Html::escape($formatter->format($timestamp, 'az_event_month')),
        ];
      }

      // Day pseudo field.
      if ($display->getComponent('az_event_day')) {
        $build['az_event_day'][] = [
          '#type' => 'markup',
          '#markup' => Html::escape($formatter->format($timestamp, 'az_event_day')),
        ];
      }
    }
  }

}

/**
 * Implements hook_preprocess_node().
 */
function az_event_preprocess_node(&$variables) {

  $node = $variables['node'];

  // Only for the event content type.
  if ($node->getType() === 'az_event') {

    // Only process if we see view information.
    if (isset($variables['elements']['#az_view_row_index'])) {

      // Get row and delta for transformations.
      $row_index = $variables['elements']['#az_view_row_index'];
      $delta = (int) $node->view->result[$row_index]->node__field_az_event_date_delta;

      // There is a field value at our computed delta.
      if (!empty($variables['content']['field_az_event_date'][$delta])) {
        $all_children = Element::children($variables['content']['field_az_event_date']);
        foreach ($all_children as $child) {
          if ($child !== $delta) {
            // Hide all the others.
            $variables['content']['field_az_event_date'][$child]['#access'] = FALSE;
          }
        }

        // Transform the sidebar psuedofields if needed.
        if ($node->hasField('field_az_event_date')) {
          $values = $node->get('field_az_event_date')->getValue();
          if (!empty($values[$delta]['value'])) {
            $timestamp = $values[$delta]['value'];
            $formatter = \Drupal::service('date.formatter');

            // Format the replacement value.
            if (!empty($variables['content']['az_event_day'])) {
              $variables['content']['az_event_day'][0]['#markup'] = Html::escape($formatter->format($timestamp, 'az_event_day'));
              $variables['content']['az_event_day']['#cache']['max-age'] = 0;
            }
            if (!empty($variables['content']['az_event_month'])) {
              $variables['content']['az_event_month']['#cache']['max-age'] = 0;
              $variables['content']['az_event_month'][0]['#markup'] = Html::escape($formatter->format($timestamp, 'az_event_month'));
            }
          }
        }
      }
      // Don't cache this particular field.
      $variables['content']['field_az_event_date']['#cache']['max-age'] = 0;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function az_event_preprocess_views_view(&$variables) {

  // EntityRow views do not give the entity access to a row_index.
  // We need to provide one to understand the delta relationship
  // of the row.
  if ($variables['id'] === 'az_events') {
    if (!empty($variables['rows'][0]['#rows'])) {
      foreach ($variables['rows'][0]['#rows'] as $i => $n) {
        $variables['rows'][0]['#rows'][$i]['#az_view_row_index'] = $i;
      }
    }
  }

}
