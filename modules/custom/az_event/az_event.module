<?php

/**
 * @file
 * Contains az_event.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Recurr\Rule;
use Recurr\Transformer\TextTransformer;
use Recurr\Transformer\Translator;

/**
 * Implements hook_theme().
 */
function az_event_theme($existing, $type, $theme, $path) {
  return [
    'az_event_calendar_add_button' => [
      'variables' => [
        'title' => NULL,
        'start_date' => NULL,
        'end_date' => NULL,
        'all_day' => FALSE,
        'description' => NULL,
        'location' => NULL,
        'modal' => NULL,
        'attributes' => NULL,
      ],
      'render element' => 'children',
    ],
    'az_event_view_occurrences_button' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
        'modal' => NULL,
        'attributes' => NULL,
      ],
    ],
    'field__node__az_event' => [
      'template' => 'field--node--az-event',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function az_event_entity_extra_field_info() {
  $extra = [];

  // Check to see if our content type exists.
  $bundle = NodeType::load('az_event');
  if ($bundle) {
    // Month pseudo field.
    $extra['node'][$bundle->id()]['display']['az_event_month'] = [
      'label' => t('Event Month'),
      'description' => "This is a pseudo field from az_event.",
      'weight' => 50,
      'visible' => FALSE,
    ];

    // Day pseudo field.
    $extra['node'][$bundle->id()]['display']['az_event_day'] = [
      'label' => t('Event Day'),
      'description' => "This is a pseudo field from az_event.",
      'weight' => 50,
      'visible' => FALSE,
    ];

    // View event pseudo field.
    $extra['node'][$bundle->id()]['display']['az_event_view_event'] = [
      'label' => t('View event pseudo field'),
      'description' => "This is a pseudo field from az_event",
      'weight' => 50,
      'visible' => FALSE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_preprocess_field().
 */
function az_event_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  if ($element['#field_name'] === 'field_az_event_category') {
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'badge badge-link text-bg-light float-start me-2 mb-2';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function az_event_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // View event pseudo field.
  if ($entity instanceof FieldableEntityInterface && $display->getComponent('az_event_view_event')) {
    $build['az_event_view_event'][] = [
      '#type' => 'markup',
      '#markup' => Html::escape('View event'),
    ];
  }

  // We only know what to do with event pseudo fields if our date seems defined.
  if ($entity instanceof FieldableEntityInterface && $entity->hasField('field_az_event_date') && !empty($entity->field_az_event_date->value)) {
    $timestamp = $entity->field_az_event_date->value;
    $formatter = \Drupal::service('date.formatter');
    $smart_date_manager = \Drupal::service('smart_date.manager');

    // Use the date.formatter service.
    if ($formatter) {
      // Month pseudo field.
      if ($display->getComponent('az_event_month')) {
        $build['az_event_month'][] = [
          '#type' => 'markup',
          '#markup' => Html::escape($formatter->format($timestamp, 'az_event_month')),
        ];
      }

      // Day pseudo field.
      if ($display->getComponent('az_event_day')) {
        $build['az_event_day'][] = [
          '#type' => 'markup',
          '#markup' => Html::escape($formatter->format($timestamp, 'az_event_day')),
        ];
      }
    }

    // Cache events per route to avoid cache issues from different views.
    // Each page view has its own route.
    // @todo do we need to be concerned about multiple view blocks of the same events per page?
    $build['#cache']['contexts'][] = 'route.name';

    // For the full content view mode, modify the display of az_event_date.
    if (($view_mode === 'full') && ($entity instanceof NodeInterface)) {
      // Compute a summary for the description.
      // Field_az_body does not have native support for summaries.
      // Some integrations for adding calendar events depend upon the data
      // being able to fit into an URL. (2048 characters)
      // Prefer field_az_summary where available.
      $summary = '';
      if ($entity->hasField('field_az_summary')) {
        /** @var \Drupal\Core\Field\FieldItemList $summary_field */
        $summary_field = $entity->get('field_az_summary');
        $summary = $summary_field->value ?? '';
      }
      if (empty($summary) && $entity->hasField('field_az_body')) {
        /** @var \Drupal\Core\Field\FieldItemList $body_field */
        $body_field = $entity->get('field_az_body');
        $summary = $body_field->value ?? '';
      }
      // By default this hinges on text.settings default_summary_length.
      $summary = text_summary($summary, 'plain_text');
      $now = \Drupal::time()->getCurrentTime();
      /** @var \Drupal\Core\Field\FieldItemList $event_date_field */
      $event_date_field = $entity->field_az_event_date;
      $number_of_occurrences = $event_date_field->count();
      if ($number_of_occurrences <= 1) {
        // Add to Calendar button for an event with a single occurrence.
        foreach ($entity->field_az_event_date as $item) {
          if (($item->value >= $now) || (!empty($item->end_value) && ($item->end_value >= $now))) {
            $start = $item->value;
            $end = $item->end_value;
            $all_day = $smart_date_manager->isAllDay($start, $end);
            $build['field_az_event_date'][] = [
              '#theme' => 'az_event_calendar_add_button',
              '#title' => $entity->getTitle(),
              '#start_date' => $start,
              '#end_date' => $end,
              '#all_day' => $all_day,
              '#description' => $summary,
              '#location' => $entity->field_az_location->title ?? '',
              '#modal' => Html::getUniqueId('calendar-link-modal'),
              '#attributes' => ['class' => 'mt-3'],
            ];
            break;
          }
        }
      }
      else {
        // Create occurrence_items array and sort items by start value.
        $occurrence_items = $event_date_field->getValue();
        $event_rrules = [];
        $are_occurrences_modified = FALSE;
        foreach ($occurrence_items as $key => $value) {
          $occurrence_items[$key]['render'] = $build['field_az_event_date'][$key];
          // Build an array of recurrence rules used by the event.
          if (isset($occurrence_items[$key]['rrule'])) {
            if (!in_array($occurrence_items[$key]['rrule'], $event_rrules)) {
              $event_rrules[] = $occurrence_items[$key]['rrule'];
            }
          }
          else {
            $are_occurrences_modified = TRUE;
          }
        }
        usort($occurrence_items, function ($a, $b) {
          if (!empty($a['value']) && !empty($b['value'])) {
            return $a['value'] <=> $b['value'];
          }
        });

        // If there is only 1 recurrence, prepare the recurrence text.
        $recurrence_text = '';
        $modified_text_markup = '';
        if (count($event_rrules) === 1) {
          $recurrence_text = az_event_get_recurrence_text(
            $event_rrules[0],
            $occurrence_items[$number_of_occurrences - 1],
            $entity->language()->getId(),
          );
          // If the date field only has a recurring item, check for overrides.
          if (!$are_occurrences_modified) {
            /** @var \Drupal\smart_date_recur\Entity\SmartDateRule $smart_date_rule */
            $smart_date_rule = \Drupal::entityTypeManager()->getStorage('smart_date_rule')->load($event_rrules[0]);
            $are_occurrences_modified = empty($smart_date_rule->getRuleOverrides()) ? FALSE : TRUE;
          }
          // Add help text if occurrences do not match the recurrence exactly.
          if ($are_occurrences_modified) {
            $modified_text = t("View all occurrences for exact dates and times.");
            $modified_text_markup = "<span class='d-block fst-italic'>* {$modified_text}</span>";
          }
        }

        // Initialize the occurrences modal render array.
        $occurrences_modal = [];
        $item_index = 0;

        // Add any upcoming occurrences to the modal render array.
        $next_occurrence = NULL;
        $add_to_calendar_button = NULL;
        foreach ($occurrence_items as $key => $item) {
          if (!empty($item['end_value']) && $item['end_value'] > $now) {
            if (!isset($next_occurrence)) {
              $next_occurrence = $key;
              $upcoming_events_heading = t("Upcoming Events");
              $occurrences_modal[$item_index++] = [
                '#markup' => "<h3 class='h5 mt-0'>{$upcoming_events_heading}</h3>",
              ];
              // Add to Calendar button for an event with multiple occurrences.
              $add_to_calendar_button = [
                '#theme' => 'az_event_calendar_add_button',
                '#title' => $entity->getTitle(),
                '#start_date' => $item['value'] ?? '',
                '#end_date' => $item['end_value'] ?? '',
                '#description' => $summary,
                '#location' => $entity->field_az_location->title ?? '',
                '#modal' => Html::getUniqueId('calendar-link-modal'),
                '#attributes' => ['class' => 'mb-2'],
              ];
            }
            $occurrences_modal[$item_index++] = $occurrence_items[$key]['render'];
          }
        }

        // Add any past occurrences to the modal render array.
        if (!isset($next_occurrence) || $next_occurrence !== 0) {
          $past_events_heading = t("Past Events");
          $occurrences_modal[$item_index++] = [
            '#markup' => "<h3 class='h5" . (isset($next_occurrence) ? '' : ' mt-0') . "'>{$past_events_heading}</h3>",
          ];
          for ($i = 0; $i < ($next_occurrence ?? $number_of_occurrences); $i++) {
            $occurrences_modal[$item_index++] = $occurrence_items[$i]['render'];
          }
        }

        // Replace/unset the items in the field_az_event_date render array.
        $item_index = 0;
        if (isset($next_occurrence)) {
          $build['field_az_event_date'][$item_index] = $occurrence_items[$next_occurrence]['render'];
          $next_event_text = t("Next event");
          $build['field_az_event_date'][$item_index]['#prefix'] = "<div class='mb-" . (empty($recurrence_text) ? '3' : '2') . "'><strong>{$next_event_text}:</strong> ";
          $build['field_az_event_date'][$item_index++]['#suffix'] = '</div>';
        }
        if (!empty($recurrence_text)) {
          $build['field_az_event_date'][$item_index++] = [
            '#markup' => "<p class='mb-3'>{$recurrence_text}{$modified_text_markup}</p>",
          ];
        }
        if (isset($next_occurrence) && isset($add_to_calendar_button)) {
          $build['field_az_event_date'][$item_index++] = $add_to_calendar_button;
        }
        $build['field_az_event_date'][$item_index++] = [
          '#theme' => 'az_event_view_occurrences_button',
          '#title' => $entity->getTitle(),
          '#items' => $occurrences_modal,
          '#modal' => Html::getUniqueId('occurrences-modal'),
          '#attributes' => ['class' => 'mb-2'],
        ];
        for ($i = $item_index; $i < $number_of_occurrences; $i++) {
          unset($build['field_az_event_date'][$i]);
        }
      }
    }
  }
}

/**
 * Returns human-readable description of a Smart Date recurrence rule.
 *
 * @param string $rule_index
 *   The index of the Smart Date recurrence rule.
 * @param array $last_occurrence
 *   The last chronological event occurrence (may not be in the recurrence).
 * @param string $event_langcode
 *   The langcode of the event to which the recurrence belongs.
 *
 * @return string
 *   A text description of the recurrence.
 */
function az_event_get_recurrence_text(string $rule_index, array $last_occurrence, string $event_langcode) {
  $recurrence_text = '';

  /** @var \Drupal\smart_date_recur\Entity\SmartDateRule $smart_date_rule */
  $smart_date_rule = \Drupal::entityTypeManager()->getStorage('smart_date_rule')->load($rule_index);
  $start_date = (new \DateTime)->setTimestamp($smart_date_rule->get('start')[0]->getString());
  $recurr_rule = new Rule($smart_date_rule->getRule(), $start_date);

  // Always set "until" to match the last occurrence's end date/time.
  $recurr_rule->setUntil((new \DateTime)->setTimestamp($last_occurrence['end_value']));

  // Use the event's language if possible.
  if ($event_langcode !== 'en') {
    try {
      $recurr_translator = new Translator($event_langcode);
      $recurr_text_transformer = new TextTransformer($recurr_translator);
    }
    catch (InvalidArgumentException $e) {
      // No translation available for this langcode: fall back to 'en'.
      $recurr_text_transformer = new TextTransformer();
    }
  }
  else {
    $recurr_text_transformer = new TextTransformer();
  }

  // Transform the recurrence rule to text.
  $recurrence_text = ucfirst($recurr_text_transformer->transform($recurr_rule));
  return $recurrence_text;
}

/**
 * Implements hook_preprocess_node().
 */
function az_event_preprocess_node(&$variables) {

  $node = $variables['node'];

  // Only for the event content type.
  if ($node->getType() === 'az_event') {

    // Only process if we see view information.
    if (isset($variables['elements']['#az_view_row_index'])) {

      // Get row and delta for transformations.
      $row_index = $variables['elements']['#az_view_row_index'];
      $delta = (int) ($node->view->result[$row_index]->node__field_az_event_date_delta ?? 0);

      // There is a field value at our computed delta.
      if (!empty($variables['content']['field_az_event_date'][$delta])) {
        $all_children = Element::children($variables['content']['field_az_event_date']);
        foreach ($all_children as $child) {
          if ($child !== $delta) {
            // Hide all the others.
            $variables['content']['field_az_event_date'][$child]['#access'] = FALSE;
          }
        }

        // Transform the sidebar psuedofields if needed.
        if ($node->hasField('field_az_event_date')) {
          $values = $node->get('field_az_event_date')->getValue();
          if (!empty($values[$delta]['value'])) {
            $timestamp = $values[$delta]['value'];
            $formatter = \Drupal::service('date.formatter');

            // Format the replacement value.
            if (!empty($variables['content']['az_event_day'])) {
              $variables['content']['az_event_day'][0]['#markup'] = Html::escape($formatter->format($timestamp, 'az_event_day'));
              $variables['content']['az_event_day']['#cache']['max-age'] = 0;
            }
            if (!empty($variables['content']['az_event_month'])) {
              $variables['content']['az_event_month']['#cache']['max-age'] = 0;
              $variables['content']['az_event_month'][0]['#markup'] = Html::escape($formatter->format($timestamp, 'az_event_month'));
            }
          }
        }
      }
      // Don't cache this particular field.
      $variables['content']['field_az_event_date']['#cache']['max-age'] = 0;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function az_event_preprocess_views_view(&$variables) {

  // EntityRow views do not give the entity access to a row_index.
  // We need to provide one to understand the delta relationship
  // of the row.
  $event_views = ['az_events', 'az_finder'];
  if (!empty($variables['id']) && in_array($variables['id'], $event_views)) {
    if (!empty($variables['rows'][0]['#rows'])) {
      foreach ($variables['rows'][0]['#rows'] as $i => $n) {
        $variables['rows'][0]['#rows'][$i]['#az_view_row_index'] = $i;
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the event view category search if there are no options.
 */
function az_event_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $view = $form_state->get('view');
  if (($view->id() === 'az_events') && ($view->current_display === 'page_1')) {

    // Check to see if the event category filter seems to exist in this display.
    if (isset($form['term_node_tid_depth'])) {
      if (isset($form['term_node_tid_depth']['#options']) &&
        is_array($form['term_node_tid_depth']['#options'])) {
        // We will only show the category filter in some cases.
        $keep_filter = TRUE;

        // Get the arguments statically, as this hook is called multiple times.
        // At some points in the request, the arguments disappear.
        $view_args = &drupal_static(__FUNCTION__);
        if (!isset($view_args)) {
          $view_args = $view->args;
        }

        // Check if our event category filter doesn't contain multiple terms.
        // The implication is this site probably doesn't use this vocabulary.
        if (count($form['term_node_tid_depth']['#options']) <= 1) {
          $keep_filter = FALSE;
        }

        // Check if we seem to have contextual filter arguments.
        if (isset($view_args) && is_array($view_args) && !empty($view_args)) {
          $keep_filter = FALSE;
        }

        // Hide the category filter if either of the above were the case.
        // Our goal is to hide the filter if it conflicts or has no terms.
        if (!$keep_filter) {
          $form['term_node_tid_depth']['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Sets the Thumbnail Image field to match the first item of the
 * "Featured Images" field if the Use Featured Image as Thumbnail
 * checkbox is checked.
 */
function az_event_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'az_event'
    && $entity instanceof NodeInterface
    && !empty($entity->get('field_az_featured_image_as_thumb')->getValue()[0]['value'])) {
    $entity->get('field_az_media_thumbnail_image')->target_id = $entity->get('field_az_photos')->target_id;
  }
}
