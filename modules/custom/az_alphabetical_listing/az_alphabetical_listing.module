<?php

/**
 * @file
 * Contains az_alphabetical_listing.module.
 */

use Drupal\views\ResultRow;
use Drupal\views\ViewExecutable;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements template_preprocess_views_view()
 */
function az_alphabetical_listing_preprocess_views_view(&$variables) {
  $view_id = $variables['view']->id();
  if ($view_id === 'az_alphabetical_listing') {
    $variables['#attached']['library'][] = 'az_alphabetical_listing/az_alphabetical_listing';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function az_alphabetical_listing_theme_registry_alter(&$theme_registry) {
  $module_path = \Drupal::service('extension.list.module')->getPath('az_alphabetical_listing');
  // Find all .html.twig files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.html.twig', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || strpos($theme_registry[$key]['theme path'], 'themes/') === FALSE) {
      // Copy default node registry entry for node entries.
      if (strpos($key, 'node') === 0) {
        $theme_registry[$key] = $theme_registry['node'];
      }
      // Copy default views registry entry for views entries.
      if (strpos($key, 'views') === 0) {
        $theme_registry[$key] = $theme_registry['views_view'];
      }
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_views_post_execute().
 */
function az_alphabetical_listing_views_post_execute(ViewExecutable $view) {
  $entity_type_id = $view->getBaseEntityType()->id();

  // Check if we're on the correct view and display
  if (($view->id() === 'az_alphabetical_glossary') && ($view->current_display === 'az_alphabetical_glossary_attachment')) {

    // Get the results of the current query.
    /** @var \Drupal\views\ResultRow[] $results */
    $results = $view->result ?? [];

    // Load the FieldStorageConfig entity for field_az_alphabetical_index to get its settings.
    $allowed_values = [];

    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage_config */
    $field_storage_config = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type_id, 'field_az_alphabetical_index');
    
    if ($field_storage_config) {
      $allowed_values = $field_storage_config->getSetting('allowed_values');
    }

    // Get the letters that were present in the original view results.
    $letters_in_original_results = [];
    foreach ($results as $original_row_index => $original_row) {
      if (isset($original_row->_entity) && $original_row->_entity->hasField('field_az_alphabetical_index')) {
        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
        $entity = $original_row->_entity;
        $field_items = $entity->get('field_az_alphabetical_index');
        if (!$field_items->isEmpty()) {
          // Use the actual field value (key) not the label.
          $letters_in_original_results[$field_items->value] = TRUE;
        }
      }
    }
    
    // Replace the view's results with new ResultRow objects based on the allowed values.
    $new_results = [];
    $current_row_index = 0;

    foreach (array_keys($allowed_values) as $letter_key) {
      $row_data = [
        'index' => $current_row_index,
        // Add custom properties that attachment display can use.
        'field_az_alphabetical_index' => $letter_key,
        '#alphabetical_label' => $allowed_values[$letter_key],
        'node__field_az_alphabetical_index_field_az_alphabetical_inde' => $allowed_values[$letter_key],
        '#existed_in_original' => isset($letters_in_original_results[$letter_key]),
      ];

      $new_results[] = new ResultRow($row_data);
      $current_row_index++;
    }

    // Update $view->result with the new set of rows.
    $view->result = $new_results;
    // Update $view->total_rows to reflect the new count.
    $view->total_rows = count($new_results);
  }
}
