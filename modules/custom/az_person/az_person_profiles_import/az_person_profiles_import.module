<?php

/**
 * @file
 * Contains az_person_profiles_import.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * Implements hook_entity_presave().
 */
function az_person_profiles_import_node_presave(EntityInterface $entity) {
  $fields = [
    'field_az_fname',
    'field_az_lname',
    'field_az_netid',
    'field_az_email',
    'field_az_body',
    'field_az_titles',
    'field_az_degrees',
    'field_az_phones',
    'field_az_research_interests',
    'field_az_teaching_interests',
    'field_az_awards',
    'field_az_licensure_certification',
    'field_az_work_experience',
  ];
  // Set a new revision to be created if this is a migrating profile.
  // Nodes from migrations are isSyncing().
  if (($entity instanceof Node) && ($entity->bundle() === 'az_person') && $entity->isSyncing() && !$entity->isNew()) {
    // Create new revision on syncing person records.
    $revision_log = 'Updated from profiles import.';
    foreach ($fields as $field) {
      if ($entity->hasField($field) && !empty($entity->original)) {
        // Check if field changed.
        $value = $entity->get($field)->getValue();
        $original = $entity->original->get($field)->getValue();
        if (serialize($value) !== serialize($original)) {
          // Field value has changed.
          // Get human readable name of field.
          $field_info = FieldStorageConfig::loadByName('node', $field);
          if (!is_null($field_info)) {
            $label = $field_info->getLabel();
            // Add mention of field being changed in log message.
            $revision_log .= " Modified field " . $label . '.';
          }
        }
      }
    }
    $entity->setNewRevision(TRUE);
    $entity->setRevisionLogMessage($revision_log);
    $entity->setRevisionCreationTime(\Drupal::time()->getCurrentTime());
    $entity->setRevisionUserId(\Drupal::currentUser()->id());
    $entity->isDefaultRevision(TRUE);
  }
}
