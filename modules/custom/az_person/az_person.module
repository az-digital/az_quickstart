<?php

/**
 * @file
 * Contains az_person.module.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_node().
 */
function az_person_preprocess_node__az_person(&$variables) {

  $variables['#attached']['library'][] = 'az_person/az_person';

}

/**
 * Implements template_preprocess_views_view()
 *
 * Modal view display uses fields instead of content. Ensure CSS loads for
 * the view as well.
 */
function az_person_preprocess_views_view(&$variables) {

  $view = $variables['view'];
  $id = $view->storage->id();
  $variables['id'] = $id;

  if ($id === 'az_person') {
    $variables['#attached']['library'][] = 'az_person/az_person';
  }

}

/**
 * Implements hook_form_FORM_ID_alter() for node_az_person_edit_form.
 *
 * Disables certain fields for imported person data.
 */
function az_person_form_node_az_person_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityFormInterface) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $form_object->getEntity();
    if ($node->hasField('field_az_netid')) {
      $netid = $node->get('field_az_netid')->value;
      if (!empty($netid)) {
        $imported = [];
        try {
          // See if a migration map exists for this person.
          $imported = \Drupal::service('migrate.lookup')->lookup('az_person_profile_import', [$netid]);
        }
        catch (\Exception $e) {
          // Migration did not exist, or migrate service not found.
          // We have no data on this person being imported or not.
        }
        if (!empty($imported)) {
          $person_warning = t('This person has been imported from the Profiles API.');
          \Drupal::messenger()->addWarning($person_warning);
          $disabled_fields = [
            'field_az_fname',
            'field_az_lname',
            'field_az_netid',
            'field_az_email',
            'field_az_phones',
            'field_az_titles',
            'field_az_degrees',
            'field_az_address',
            'field_az_body',
          ];
          foreach ($disabled_fields as $field) {
            if (!empty($form[$field])) {
              $form[$field]['#disabled'] = TRUE;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function az_person_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() === 'node') && ($bundle === 'az_person') && (!empty($fields['field_az_netid']))) {
    // Alter a unique constraint to the netID field.
    // \Drupal\Core\Validation\Plugin\Validation\Constraint\UniqueFieldConstraint.
    $fields['field_az_netid']->addConstraint('UniqueField');
  }
}

/**
 * Implements hook_preprocess_field().
 */
function az_person_preprocess_field(array &$variables) {
  $entity_type = $variables['element']['#entity_type'] ?? '';
  $bundle = $variables['element']['#bundle'] ?? '';
  $field_name = $variables['element']['#field_name'] ?? '';
  if ($entity_type === 'node' && $bundle === 'az_person' && $field_name === 'field_az_suffix') {
    $suffix = $variables['element']['#items'][0]->value ?? '';
    if (!empty($suffix)) {
      $variables['items'][0]['content']['#context'] = [
        'value' => ', ' . $suffix,
      ];
    }
  }
}

/**
 * Implements hook_theme().
 */
function az_person_theme() {
  $base_hook = [
    'base hook' => 'field_group_html_element',
  ];
  return [
    'field_group_html_element__node__az_person__h1' => $base_hook,
    'field_group_html_element__node__az_person__h2' => $base_hook,
    'field_group_html_element__node__az_person__h3' => $base_hook,
  ];
}
