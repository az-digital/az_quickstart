<?php

/**
 * @file
 * Contains az_person.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;

/**
 * Implements hook_preprocess_node().
 */
function az_person_preprocess_node__az_person(&$variables) {

  $variables['#attached']['library'][] = 'az_person/az_person';

}

/**
 * Implements template_preprocess_views_view()
 *
 * Modal view display uses fields instead of content. Ensure CSS loads for
 * the view as well.
 */
function az_person_preprocess_views_view(&$variables) {

  $view = $variables['view'];
  $id = $view->storage->id();
  $variables['id'] = $id;

  if ($id === 'az_person') {
    $variables['#attached']['library'][] = 'az_person/az_person';
  }

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function az_person_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() === 'node') && ($bundle === 'az_person') && (!empty($fields['field_az_netid']))) {
    // Alter a unique constraint to the netID field.
    // \Drupal\Core\Validation\Plugin\Validation\Constraint\UniqueFieldConstraint.
    $fields['field_az_netid']->addConstraint('UniqueField');
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function az_person_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity instanceof FieldableEntityInterface) {
    if ($entity->hasField('field_az_suffix')) {
      if (empty($entity->get('field_az_suffix')->getValue())) {
        return;
      };
      $suffix_field = $entity->get('field_az_suffix');
      $items = [];
      foreach ($suffix_field as $suffix_item) {
        $item_value = $suffix_item->getValue();
        $items[] = [
          '#markup' => $item_value['value'] ?? '',
          '#wrapper_attributes' => ['class' => ['list-inline-item']],
        ];
      }
      $build['field_az_suffix'] = [
        '#theme' => 'item_list',
        '#items' => $items,
        '#context' => ['list_style' => 'comma-list'],
        '#attributes' => ['class' => ['list-inline']],
        '#wrapper_attributes' => ['class' => ['inline']],
        '#theme_wrappers' => [],
      ];
    }
  }
}
