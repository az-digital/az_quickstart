<?php

/**
 * @file
 * Contains az_person.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;

/**
 * Implements hook_preprocess_node().
 */
function az_person_preprocess_node__az_person(&$variables) {

  $variables['#attached']['library'][] = 'az_person/az_person';

}

/**
 * Implements template_preprocess_views_view()
 *
 * Modal view display uses fields instead of content. Ensure CSS loads for
 * the view as well.
 */
function az_person_preprocess_views_view(&$variables) {

  $view = $variables['view'];
  $id = $view->storage->id();
  $variables['id'] = $id;

  if ($id === 'az_person') {
    $variables['#attached']['library'][] = 'az_person/az_person';
  }

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function az_person_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($entity_type->id() === 'node') && ($bundle === 'az_person') && (!empty($fields['field_az_netid']))) {
    // Alter a unique constraint to the netID field.
    // \Drupal\Core\Validation\Plugin\Validation\Constraint\UniqueFieldConstraint.
    $fields['field_az_netid']->addConstraint('UniqueField');
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function az_person_entity_extra_field_info() {
  $extra = [];
  $entity_type_manager = \Drupal::entityTypeManager();
  $node_type_storage = $entity_type_manager->getStorage('node_type');
  $bundle = $node_type_storage->load('az_person');
  if ($bundle) {
    // Suffix pseudo field.
    $extra['node'][$bundle->id()]['display']['az_person_name'] = [
      'label' => t('Combined Name'),
      'description' => "This is a pseudo field from az_person.",
      'weight' => 50,
      'visible' => FALSE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function az_person_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity instanceof FieldableEntityInterface) {
    if ($entity->hasField('field_az_suffix')) {
       $suffix = $entity->get('field_az_suffix')->getValue()[0]['value'] ?? '';
    };
    if ($entity->hasField('title')) {
      $title = $entity->get('title')->getValue()[0]['value'] ?? '';
    };
    $build['az_person_name'] = [
      '#markup' => $title . $suffix,
    ];
  }
}
