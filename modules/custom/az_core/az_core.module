<?php

/**
 * @file
 * Contains az_core.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Extension\Exception\UnknownExtensionException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;
use Drupal\pathauto\PathautoPatternInterface;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_help().
 */
function az_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the az_core module.
    case 'help.page.az_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Settings and configuration common to other Quickstart components.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar().
 */
function az_core_toolbar() {
  $items = [];

  $items['az_quickstart'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Quickstart 2'),
      '#url' => Url::fromRoute('az_core.az_quickstart'),
      '#attributes' => [
        'target' => t('_blank'),
        'title' => t('AZ Quickstart 2'),
        'class' => [
          'toolbar-item',
        ],
      ],
    ],
    'tray' => [
      '#heading' => t('Quickstart links'),
      'az_links' => [
        '#theme' => 'links__toolbar_az_core',
        '#links' => [
          'docs' => [
            'title' => t('Documentation'),
            'url' => Url::fromUri('https://quickstart.arizona.edu'),
            'attributes' => [
              'title' => t('Arizona Quickstart 2 Documentation'),
              'target' => t('_blank'),
            ],
          ],
        ],
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#weight' => 101,
  ];

  // Get extension information.
  $extension_list = \Drupal::service('extension.list.module');
  $version = NULL;
  try {
    // Fetch information about installation profile.
    $information = $extension_list->getExtensionInfo('az_quickstart');
    if (isset($information['version'])) {
      $version = $information['version'];

      // Update links with version information where applicable.
      $items['az_quickstart']['tab']['#title'] = t('Quickstart @version', ['@version' => $version]);
      $items['az_quickstart']['tab']['#attributes']['title'] = t('AZ Quickstart @version', ['@version' => $version]);
    }
  }
  catch (UnknownExtensionException $e) {
    // Do nothing if no profile.
  }

  if (\Drupal::currentUser()->hasPermission('administer quickstart configuration')) {
    $admin_items = [
      'settings' => [
        'title' => t('Settings'),
        'url' => Url::fromRoute('az_core.az_settings'),
        'attributes' => [
          'title' => t('Arizona Quickstart 2 Settings'),
        ],
      ],
      'releases' => [
        'title' => t('Releases'),
        'url' => Url::fromUri('https://github.com/az-digital/az_quickstart/releases'),
        'attributes' => [
          'title' => t('Arizona Quickstart 2 Releases'),
          'target' => t('_blank'),
        ],
      ],
    ];
    // Add by union to position at front of links.
    $items['az_quickstart']['tray']['az_links']['#links'] = $admin_items + $items['az_quickstart']['tray']['az_links']['#links'];

    if (!empty($version)) {
      $items['az_quickstart']['tray']['az_links']['#links']['releases']['url'] = Url::fromUri("https://github.com/az-digital/az_quickstart/releases/{$version}");
    }

  }

  return $items;
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Provide a fallback if the current node is not in a menu.
 * Reference: https://www.drupal.org/i/2904757#comment-13421490
 */
function az_core_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  // Manually specify default AZQS pattern.
  $azqs_pattern = '[node:menu-link:parents:join-path]/[node:menu-link]';

  // Check if context is node and pattern is the AZQS default.
  if ($context['module'] === 'node' && $pattern->getPattern() === $azqs_pattern) {
    $menu = $context['data']['node']->__get('menu');

    // Set pattern to fallback if menu is not enabled.
    if (isset($menu['enabled']) && $menu['enabled'] === 0) {
      $pattern->setPattern('[node:title]');
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function az_core_modules_installed($modules, $is_syncing) {

  // Import overrides that exist for the enabled modules.
  $overrider = Drupal::service('az_core.override_import');
  if ($overrider) {
    $overrider->importOverrides($modules);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function az_core_modules_uninstalled($modules) {

  // Import overrides that exist for the enabled modules.
  $overrider = \Drupal::service('az_core.override_import');
  if ($overrider) {
    $overrider->importOverrides([]);
  }
}

/**
 * Implements hook_block_access().
 */
function az_core_block_access(Block $block, $operation, AccountInterface $account) {
  if ($operation === 'view' && $block->id() === 'az_barrio_sidebar_menu') {
    $block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
    $markup = \Drupal::service('renderer')->renderRoot($block_content);
    return AccessResult::forbiddenIf($markup === '')->addCacheableDependency($block);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_token_info().
 */
function az_core_token_info() {
  return [
    'tokens' => [
      'node' => [
        'az-canonical-url' => [
          'name' => t("AZ Canonical URL"),
          'description' => t("Returns the URI value of field_az_link if present on the node or the default node URI if not."),
        ],
        'az-canonical-absolute-url' => [
          'name' => t("AZ Canonical Absolute URL"),
          'description' => t("Returns an absolute URL for field_az_link if present on the node or the default node URL if not."),
        ],
        'az-canonical-summary-link-title' => [
          'name' => t("AZ Canonical Summary Link Title"),
          'description' => t("Returns the link title value of field_az_link if present on the node or nothing if not."),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_token().
 */
function az_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'node') {
    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'az-canonical-url':
          $replacements[$original] = az_core_canonical_url($data);
          break;

        case 'az-canonical-absolute-url':
          $replacements[$original] = az_core_canonical_url($data, TRUE);
          break;

        case 'az-canonical-summary-link-title':
          $replacements[$original] = az_core_canonical_summary_link_title($data);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Token replacement callback providing the canonical link title.
 *
 * Returns the link title value of field_az_link if present on the node, or
 * "Read more" if not.
 *
 * @param array $data
 *   Node data from hook_tokens().
 *
 * @return string
 *   The node's canonical link title.
 */
function az_core_canonical_summary_link_title(array $data) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $data['node'];
  $read_more_text = 'Read more';

  if (!empty($node->field_az_link[0]->title)) {
    $read_more_text = $node->field_az_link[0]->title;
  }

  return $read_more_text;
}

/**
 * Token replacement callback providing the canonical URI or URL for a node.
 *
 * Returns the URI value of field_az_link if present on the node or the default
 * node URI if not. Optionally return an absolute URL instead.
 *
 * @param array $data
 *   Node data from hook_tokens().
 * @param bool $absolute
 *   Flag to determine whether to return an absolute URL.
 *
 * @return string
 *   The node's canonical URI or URL.
 */
function az_core_canonical_url(array $data, bool $absolute = FALSE) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $data['node'];
  /** @var \Drupal\Core\Url $url */
  $url = $node->toUrl();
  $uri = $absolute ? $url->setOption('absolute', TRUE)->toString() : $url->toUriString();

  if (!empty($node->field_az_link[0]->uri)) {
    $uri = $node->field_az_link[0]->uri;
  }

  return $uri;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Replaces links to Site information page in system_branding_block settings
 * form with links to Quickstart settings page.
 *
 * @see Drupal\system\Plugin\Block\SystemBrandingBlock::blockForm()
 */
function az_core_form_block_form_alter(&$form, &$form_state, $form_id) {
  $build_info = $form_state->getBuildInfo();
  $plugin_id = $build_info['callback_object']->getEntity()->getPluginId();
  if ($plugin_id === 'system_branding_block') {
    // Get permissions.
    $url_quickstart_settings = new Url('az_core.az_settings');

    if ($url_quickstart_settings->access()) {
      // Get path to settings page.
      $quickstart_settings_url = $url_quickstart_settings->toString();

      // Provide link to Quickstart settings page if the user has access.
      $site_name_description = t('Defined on the <a href=":information">Quickstart settings</a> page.', [':information' => $quickstart_settings_url]);
    }
    else {
      // Explain that the user does not have access to the Quickstart settings
      // page.
      $site_name_description = t('Defined on the Quickstart settings page. You do not have the appropriate permissions to change the site name.');
    }
    $form['settings']['block_branding']['use_site_name']['#description'] = $site_name_description;

    // Suppress site slogan toggle.
    $form['settings']['block_branding']['use_site_slogan']['#access'] = FALSE;

    // Modify help text.
    $form['settings']['block_branding']['#description'] = t('Choose which branding elements you want to show in this block instance.  Enabling both the Site logo and the Site name is <strong><em>not recommended</em></strong> per University of Arizona brand guidelines.');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Adds style overrides for claro/node-form and arizona-bootstrap.
 */
function az_core_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'az_core/claro-node-form-overrides';
  $form['#attached']['library'][] = 'az_core/arizona-bootstrap-node-form-overrides';
}

/**
 * Perform alterations before attribute forms are rendered.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The unique ID of the form.
 */
function _az_core_check_attribute_form(array &$form, FormStateInterface $form_state, $form_id) {
  $az_core_config = \Drupal::config('az_core.settings');

  // Key the form cache to the settings.
  $tags = $form['#cache']['tags'] ?? [];
  $form['#cache']['tags'] = array_merge($tags, $az_core_config->getCacheTags());

  // Check the status of the enterprise attribute lock.
  $disabled = $az_core_config->get('enterprise_attributes.locked');

  // Display warning notification.
  \Drupal::messenger()->addMessage(t('Enterprise attributes should not normally be altered.'), MessengerInterface::TYPE_WARNING);

  if ($disabled) {
    // Flag error behavior depending on form type.
    switch ($form_id) {
      case 'taxonomy_overview_terms':
        $form['#validate'][] = '_az_core_prohibted_form';
        break;

      default:
        $url = Url::fromRoute('az_core.az_settings');
        \Drupal::messenger()->addMessage(t('Enterprise attributes are locked. Please see the enterprise attribute <a href="@settings">settings</a>.', [
          '@settings' => $url->toString(),
        ]), MessengerInterface::TYPE_ERROR);
        throw new AccessDeniedHttpException();
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Override Drupal core generator metatag for distribution.
 */
function az_core_page_attachments_alter(array &$page) {
  // Verify we're not trying to add tag to some page that should not have it.
  if (!empty($page['#attached']['html_head'])) {
    foreach ($page['#attached']['html_head'] as &$head_item) {
      // Check if the current item is the meta generator.
      if (is_array($head_item) && in_array('system_meta_generator', $head_item, TRUE)) {
        // Update the tag if it's present.
        if (!empty($head_item[0]['#attributes']['content'])) {
          $head_item[0]['#attributes']['content'] = 'Arizona Quickstart (https://quickstart.arizona.edu)';
        }
      }
    }
  }
}

/**
 * Form validation that fails validation on protected term pages.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _az_core_prohibted_form(array &$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('az_core.az_settings');
  $form_state->setErrorByName('terms', t('Enterprise attributes are locked. Please see the enterprise attribute <a href="@settings">settings</a>.', [
    '@settings' => $url->toString(),
  ]));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for enterprise attribute terms.
 *
 * Adds warnings and access restrictions.
 */
function az_core_form_taxonomy_term_az_enterprise_attributes_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _az_core_check_attribute_form($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for attribute term deletion.
 *
 * Adds warnings and access restrictions.
 */
function az_core_form_taxonomy_term_az_enterprise_attributes_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _az_core_check_attribute_form($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for enterprise attribute overview.
 *
 * Adds warnings and access restrictions.
 */
function az_core_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {
  $vocabulary = $form_state->get(['taxonomy', 'vocabulary']);
  if (!empty($vocabulary) && ($vocabulary->id() === 'az_enterprise_attributes')) {
    _az_core_check_attribute_form($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_entity_access().
 */
function az_core_node_access(NodeInterface $node, $op, AccountInterface $account) {

  // NetID permission is only viable for update operation.
  if ($account->hasPermission('edit matching netid content') && ($op === 'update')) {
    $bundle = $node->getType();
    // We are only interested in Person content.
    if ($bundle === 'az_person') {
      // Determine if netid field exists.
      if ($node->hasField('field_az_netid')) {
        /** @var \Drupal\Core\Entity\ContentEntityBase $node */
        $netid = $node->field_az_netid->value;
        try {
          // Look up user mapping for CAS.
          $auth = \Drupal::service('externalauth.authmap')->get($account->id(), 'cas');
          if (($auth !== FALSE) && (!empty($netid)) && ($auth === $netid)) {
            return AccessResult::allowed()->cachePerPermissions();
          }
        }
        catch (ServiceNotFoundException $e) {
        }
      }
    }
  }

  // No opinion about other permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for enterprise attribute reset.
 *
 * Adds warnings and access restrictions.
 */
function az_core_form_taxonomy_vocabulary_confirm_reset_alphabetical_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\taxonomy\Form\VocabularyResetForm $form_object */
  $form_object = $form_state->getformObject();
  if ($form_object->getEntity()->id() === 'az_enterprise_attributes') {
    _az_core_check_attribute_form($form, $form_state, $form_id);
  }
}
