<?php

/**
 * @file
 * Contains az_core.module.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_help().
 */
function az_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the az_core module.
    case 'help.page.az_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Settings and configuration common to other Quickstart componenets..') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar().
 */
function az_core_toolbar() {
  $items = [];

  $items['az_quickstart'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Quickstart 2'),
      '#url' => Url::fromUri('https://quickstart.arizona.edu'),
      '#attributes' => [
        'target' => t('_blank'),
        'title' => t('AZ Quickstart 2'),
        'class' => [
          'toolbar-item',
        ],
      ],
    ],
    '#weight' => 101,
  ];

  return $items;
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Provide a fallback if the current node is not in a menu.
 * Reference: https://www.drupal.org/i/2904757#comment-13421490
 */
function az_core_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  // Manually specify default AZQS pattern.
  $azqs_pattern = '[node:menu-link:parents:join-path]/[node:menu-link]';

  // Check if context is node and pattern is the AZQS default.
  if ($context['module'] === 'node' && $pattern->getPattern() === $azqs_pattern) {
    $menu = $context['data']['node']->__get('menu');

    // Set pattern to fallback if menu is not enabled.
    if (isset($menu['enabled']) && $menu['enabled'] === 0) {
      $pattern->setPattern('[node:title]');
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function az_core_modules_installed($modules, $is_syncing) {

  // Import overrides that exist for the enabled modules.
  $overrider = Drupal::service('az_core.override_import');
  if ($overrider) {
    $overrider->importOverrides($modules);
  }
}

/**
 * Implements hook_block_access().
 */
function az_core_block_access(Block $block, $operation, AccountInterface $account) {
  if ($operation === 'view' && $block->id() === 'az_barrio_sidebar_menu') {
    $block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
    $markup = \Drupal::service('renderer')->renderRoot($block_content);
    return AccessResult::forbiddenIf($markup === '')->addCacheableDependency($block);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_token_info().
 */
function az_core_token_info() {
  return [
    'tokens' => [
      'node' => [
        'az-canonical-url' => [
          'name' => t("AZ Canonical URL"),
          'description' => t("Returns the URI value of field_az_link if present on the node or the default node URI if not."),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_token().
 */
function az_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'node') {
    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'az-canonical-url':
          $replacements[$original] = az_core_canonical_url($data);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Token replacement callback providing the canonical URI for a node.
 *
 * Returns the URI value of field_az_link if present on the node or the default
 * node URI if not.
 *
 * @param array $data
 *   Node data from hook_tokens().
 *
 * @return string
 *   The node's canononical URI.
 */
function az_core_canonical_url(array $data) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $data['node'];
  /** @var \Drupal\Core\Url $url */
  $url = $node->toUrl();
  $uri = $url->toUriString();

  if (!empty($node->field_az_link[0]->uri)) {
    $uri = $node->field_az_link[0]->uri;
  }

  return $uri;
}
