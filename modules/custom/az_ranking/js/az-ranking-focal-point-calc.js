/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
((Drupal, once) => {
  Drupal.behaviors.azRankingFocalPoint = {
    attach: context => {
      const images = once('az-ranking-focal-point', '.ranking-img', context);
      if (images.length === 0) return;
      const calculateObjectPosition = img => {
        const focalX = parseFloat(img.getAttribute('data-focal-x'));
        const focalY = parseFloat(img.getAttribute('data-focal-y'));
        if (Number.isNaN(focalX) || Number.isNaN(focalY)) {
          console.warn('⚠️ No focal point data for image:', img.getAttribute('src'));
          return;
        }
        const containerW = img.offsetWidth;
        const containerH = img.offsetHeight;
        const originalW = parseFloat(img.getAttribute('data-original-width')) || img.naturalWidth;
        const originalH = parseFloat(img.getAttribute('data-original-height')) || img.naturalHeight;
        if (!originalW || !originalH || !containerW || !containerH) return;
        const imageRatio = originalW / originalH;
        const containerRatio = containerW / containerH;
        let scaledW;
        let scaledH;
        if (imageRatio > containerRatio) {
          scaledH = containerH;
          scaledW = containerH * imageRatio;
        } else {
          scaledW = containerW;
          scaledH = containerW / imageRatio;
        }
        let objectPosX;
        let objectPosY;
        if (imageRatio > containerRatio) {
          objectPosX = (focalX * scaledW - 0.5 * containerW) / (scaledW - containerW);
          objectPosY = focalY;
        } else {
          objectPosX = focalX;
          objectPosY = (focalY * scaledH - 0.5 * containerH) / (scaledH - containerH);
        }
        objectPosX = Math.max(0, Math.min(100, objectPosX * 100));
        objectPosY = Math.max(0, Math.min(100, objectPosY * 100));
        img.style.objectPosition = `${objectPosX}% ${objectPosY}%`;
      };
      const processImages = () => {
        images.forEach(img => {
          if (img.complete && img.naturalWidth > 0) {
            calculateObjectPosition(img);
          } else {
            img.addEventListener('load', () => calculateObjectPosition(img), {
              once: true
            });
          }
        });
      };
      processImages();
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          images.forEach(img => calculateObjectPosition(img));
        }, 250);
      });
    }
  };
})(Drupal, once);