/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
((Drupal, once) => {
  Drupal.behaviors.azRankingFocalPointPicker = {
    attach: context => {
      const pickerWrappers = once('focal-point-picker', '.focal-point-picker-wrapper', context);
      pickerWrappers.forEach(wrapper => {
        const image = wrapper.querySelector('.focal-point-picker-image');
        if (!image) {
          // eslint-disable-next-line no-console
          console.warn('No image found in focal point picker wrapper');
          return;
        }
        let focalX = parseFloat(wrapper.getAttribute('data-focal-x')) || 0.5;
        let focalY = parseFloat(wrapper.getAttribute('data-focal-y')) || 0.5;
        const imageContainer = document.createElement('div');
        imageContainer.className = 'focal-point-image-container';
        imageContainer.style.position = 'relative';
        imageContainer.style.display = 'inline-block';
        imageContainer.style.maxWidth = '100%';
        image.parentNode.insertBefore(imageContainer, image);
        imageContainer.appendChild(image);
        const overlay = document.createElement('div');
        overlay.className = 'focal-point-overlay';
        const indicator = document.createElement('div');
        indicator.className = 'focal-point-indicator';
        indicator.title = 'Click to set focal point';
        overlay.appendChild(indicator);
        imageContainer.appendChild(overlay);
        const focalXInput = context.querySelector('.js-focal-point-x-value');
        const focalYInput = context.querySelector('.js-focal-point-y-value');
        if (!focalXInput || !focalYInput) {
          // eslint-disable-next-line no-console
          console.warn('Could not find focal point input fields! Focal point changes will not be saved.');
        }
        const updateIndicatorPosition = () => {
          const width = image.offsetWidth;
          const height = image.offsetHeight;
          if (width < 10 || height < 10) {
            return;
          }
          const indicatorLeft = focalX * width;
          const indicatorTop = focalY * height;
          indicator.style.left = `${indicatorLeft}px`;
          indicator.style.top = `${indicatorTop}px`;
        };
        image.addEventListener('load', () => {
          updateIndicatorPosition();
        });
        setTimeout(() => {
          updateIndicatorPosition();
        }, 100);
        if (image.complete) {
          setTimeout(() => {
            updateIndicatorPosition();
          }, 150);
          setTimeout(() => {
            updateIndicatorPosition();
          }, 300);
          setTimeout(() => {
            updateIndicatorPosition();
          }, 500);
        }
        document.addEventListener('dialogopen', () => {
          setTimeout(() => {
            updateIndicatorPosition();
          }, 150);
        });
        overlay.addEventListener('click', e => {
          const rect = image.getBoundingClientRect();
          const width = image.offsetWidth;
          const height = image.offsetHeight;
          focalX = (e.clientX - rect.left) / width;
          focalY = (e.clientY - rect.top) / height;
          focalX = Math.max(0, Math.min(1, focalX));
          focalY = Math.max(0, Math.min(1, focalY));
          if (focalXInput && focalYInput) {
            focalXInput.value = focalX.toFixed(2);
            focalXInput.dispatchEvent(new Event('change', {
              bubbles: true
            }));
            focalYInput.value = focalY.toFixed(2);
            focalYInput.dispatchEvent(new Event('change', {
              bubbles: true
            }));
          }
          updateIndicatorPosition();
          indicator.classList.add('focal-point-indicator--active');
          setTimeout(() => {
            indicator.classList.remove('focal-point-indicator--active');
          }, 300);
        });
        window.addEventListener('resize', updateIndicatorPosition);
      });
    }
  };
})(Drupal, once);