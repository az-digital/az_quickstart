<?php

/**
 * @file
 * Contains az_ranking.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function az_ranking_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the az_ranking module.
    case 'help.page.az_ranking':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom field plugins and theme template for rankings.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function az_ranking_theme($existing, $type, $theme, $path) {
  return [
    'az_ranking' => [
      'variables' => [
        'attributes' => [],
        'media' => NULL,
        'column_span' => NULL,
        'ranking_hover_style' => NULL,
        'ranking_heading' => NULL,
        'ranking_alignment' => NULL,
        'ranking_title_style' => NULL,
        'ranking_description' => NULL,
        'ranking_source' => NULL,
        'ranking_source_classes' => NULL,
        'ranking_font_color' => NULL,
        'text_color_override' => NULL,
        'link_url' => NULL,
      ],
      'template' => 'az-ranking',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function az_ranking_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add focal point picker to az_image media edit form.
  if ($form_id === 'media_az_image_edit_form' || $form_id === 'media_az_image_add_form') {
    
    // Only show focal point picker if opened in a dialog/modal context.
    // This typically means it was opened from the media library widget.
    $request = \Drupal::request();
    $is_modal = $request->query->get('_wrapper_format') === 'drupal_dialog' || 
                $request->query->get('_wrapper_format') === 'drupal_modal' ||
                $request->request->get('_drupal_ajax');
    
    // Skip if not in modal context.
    if (!$is_modal) {
      return;
    }
    
    // Hide the focal point coordinate fields.
    if (isset($form['field_focal_point_x'])) {
      $form['field_focal_point_x']['#access'] = FALSE;
    }
    if (isset($form['field_focal_point_y'])) {
      $form['field_focal_point_y']['#access'] = FALSE;
    }
    
    // Get the media entity.
    $media = $form_state->getFormObject()->getEntity();
    
    // Only add focal point picker if there's an image.
    if ($media && $media->hasField('field_media_az_image') && !$media->get('field_media_az_image')->isEmpty()) {
      /** @var \Drupal\file\FileInterface $file */
      $file = $media->get('field_media_az_image')->entity;
      
      if ($file) {
        // Get current focal point values.
        $focal_x = 0.5;
        $focal_y = 0.5;
        
        if ($media->hasField('field_focal_point_x') && !$media->get('field_focal_point_x')->isEmpty()) {
          $focal_x = (float) $media->get('field_focal_point_x')->value;
        }
        if ($media->hasField('field_focal_point_y') && !$media->get('field_focal_point_y')->isEmpty()) {
          $focal_y = (float) $media->get('field_focal_point_y')->value;
        }
        
        // Add focal point picker as a child of the field_media_az_image field.
        // This nests it under the "Image" section like "Crop image".
        if (isset($form['field_media_az_image'])) {
          $form['field_media_az_image']['widget'][0]['focal_point_picker'] = [
            '#type' => 'details',
            '#title' => t('Focal Point for AZ Ranking Image'),
            '#description' => t('Click on the image to set the focal point. This determines which part of the image should remain visible when the image is cropped for different aspect ratios.'),
            '#open' => TRUE,
            '#weight' => -5,
            '#attributes' => [
              'class' => ['az-ranking-focal-point-section'],
            ],
          ];
          
          $form['field_media_az_image']['widget'][0]['focal_point_picker']['preview'] = [
            '#type' => 'container',
            '#attributes' => [
              'class' => ['focal-point-picker-wrapper'],
              'data-focal-x' => $focal_x,
              'data-focal-y' => $focal_y,
            ],
          ];
          
          // Add the image preview.
          $form['field_media_az_image']['widget'][0]['focal_point_picker']['preview']['image'] = [
            '#theme' => 'image_style',
            '#style_name' => 'large',
            '#uri' => $file->getFileUri(),
            '#attributes' => [
              'class' => ['focal-point-picker-image'],
            ],
          ];
        }
        
        // Attach the focal point picker library.
        $form['#attached']['library'][] = 'az_ranking/focal_point_picker';
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for media entities.
 * 
 * This catches media saves from ANY context, including embedded widgets and AJAX requests.
 */
function az_ranking_media_presave(\Drupal\media\MediaInterface $media) {
  // Only process az_image media type.
  if ($media->bundle() !== 'az_image') {
    return;
  }
  
  // Check if focal point fields have values.
  if ($media->hasField('field_focal_point_x') && $media->hasField('field_focal_point_y')) {
    if (!$media->get('field_focal_point_x')->isEmpty() && !$media->get('field_focal_point_y')->isEmpty()) {
      $focal_x = (float) $media->get('field_focal_point_x')->value;
      $focal_y = (float) $media->get('field_focal_point_y')->value;
      
      // Get the source image file.
      $source_field = $media->getSource()->getConfiguration()['source_field'];
      if (!$media->hasField($source_field) || $media->get($source_field)->isEmpty()) {
        return;
      }
      
      /** @var \Drupal\file\FileInterface $file */
      $file = $media->get($source_field)->entity;
      if (!$file) {
        return;
      }
      
      // Get image dimensions.
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if (!$image->isValid()) {
        return;
      }
      
      $width = $image->getWidth();
      $height = $image->getHeight();
      
      // Convert 0.0-1.0 coordinates to absolute pixel coordinates.
      $absolute_x = (int) round($focal_x * $width);
      $absolute_y = (int) round($focal_y * $height);
      
      // Create or update the crop entity.
      $crop_type = 'focal_point';
      $crop = \Drupal\crop\Entity\Crop::findCrop($file->getFileUri(), $crop_type);
      
      if ($crop) {
        // Update existing crop.
        $crop->setPosition($absolute_x, $absolute_y);
        $crop->save();
      }
      else {
        // Create new crop entity.
        $crop = \Drupal\crop\Entity\Crop::create([
          'type' => $crop_type,
          'entity_id' => $file->id(),
          'entity_type' => 'file',
          'uri' => $file->getFileUri(),
          'x' => $absolute_x,
          'y' => $absolute_y,
          'width' => $width,
          'height' => $height,
        ]);
        $crop->save();
      }
      
      // Flush image style derivatives.
      image_path_flush($file->getFileUri());
      
      \Drupal::logger('az_ranking')->info('Focal point saved via presave for media @id: @x, @y', [
        '@id' => $media->id(),
        '@x' => number_format($focal_x, 2),
        '@y' => number_format($focal_y, 2),
      ]);
    }
  }
}
