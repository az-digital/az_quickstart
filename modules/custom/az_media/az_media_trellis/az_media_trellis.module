<?php

/**
 * @file
 * Hook implementations and global functions for az_media_trellis.
 */

use Drupal\media\Entity\Media;

/**
 * Implements hook_theme().
 */
function az_media_trellis_theme($existing, $type, $theme, $path) {
  return [
    'az_media_trellis' => [
      'variables' => [
        'type' => NULL,
        'url' => NULL,
        'width' => NULL,
        'height' => NULL,
      ],
      'template' => 'az-media-trellis',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for media entities.
 */
function az_media_trellis_preprocess_media(&$variables) {
  // Add a wrapper class to indicate this is a preview.
  // $variables['content']['#prefix'] = '<div class="az-media-trellis-preview">';
  // $variables['content']['#suffix'] = '</div>';

  // Get the media entity object.
  if (isset($variables['elements']['#media']) && $variables['elements']['#media'] instanceof Media) {
    $media = $variables['elements']['#media'];

    // Check if the current route is an editing context.
    $route_name = \Drupal::routeMatch()->getRouteName();
    $is_editing_context = in_array($route_name, [
      'entity.node.edit_form',  // Node edit form.
      'entity.node.add_form',   // Node add form.
      'media_library.ui',       // Media library.
    ]);

    // Use a custom view mode for editing contexts.
    if ($is_editing_context) {
      $variables['view_mode'] = 'media.preview';
    }

    // Retrieve the value of the 'field_az_media_trellis_rec_id' field.
    if ($media->hasField('field_az_media_trellis_rec_id') && !$media->get('field_az_media_trellis_rec_id')->isEmpty()) {
      $rec_id_value = $media->get('field_az_media_trellis_rec_id')->value;

      // Pass the value to the JavaScript library via drupalSettings.
      $variables['#attached']['drupalSettings']['azMediaTrellis'] = [
        'tfa_4' => $rec_id_value,
      ];
    }
  }
}
