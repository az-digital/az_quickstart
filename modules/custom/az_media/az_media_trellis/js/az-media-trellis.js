/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function azMediaTrellisIife(Drupal, drupalSettings) {
  function TrellisFormHandler(container, queryParams, editing) {
    this.container = container;
    this.queryParams = queryParams;
    this.editing = editing;
    this.processed = false;
  }
  TrellisFormHandler.prototype.init = function init() {
    this.setupContentObserver();
    if (this.container.children.length > 0) {
      this.processForm();
    }
  };
  TrellisFormHandler.prototype.setupContentObserver = function setupContentObserver() {
    if (this.processed) return;
    const observer = new MutationObserver(() => {
      if (!this.processed && this.container.children.length > 0) {
        this.processForm();
        observer.disconnect();
      }
    });
    observer.observe(this.container, {
      childList: true,
      subtree: true
    });
  };
  TrellisFormHandler.prototype.processForm = function processForm() {
    if (this.processed) return;
    this.processed = true;
    if (this.editing) {
      this.setupEditingMode();
    }
    this.prefillFields();
  };
  TrellisFormHandler.prototype.setupEditingMode = function setupEditingMode() {
    const requiredFields = this.container.querySelectorAll('input[aria-required], input.required');
    requiredFields.forEach(field => {
      field.removeAttribute('aria-required');
      field.classList.remove('required');
    });
  };
  TrellisFormHandler.prototype.prefillFields = function prefillFields() {
    Object.entries(this.queryParams).forEach(([name, value]) => {
      const field = this.container.querySelector(`[name="${name}"]`);
      if (field && field.value !== value) {
        field.value = value;
        field.dispatchEvent(new Event('input', {
          bubbles: true
        }));
      }
    });
  };
  Drupal.behaviors.azMediaTrellis = {
    attach(context) {
      const config = drupalSettings.azMediaTrellis || {};
      const queryParams = config.queryParams || {};
      const editing = config.editing || false;
      const formContainers = context.querySelectorAll('.az-media-trellis:not([data-az-processed])');
      formContainers.forEach(container => {
        container.setAttribute('data-az-processed', 'true');
        const handler = new TrellisFormHandler(container, queryParams, editing);
        handler.init();
      });
    }
  };
})(Drupal, drupalSettings);