/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function azMediaTrellisIife(Drupal, drupalSettings) {
  function installCssBlockerOnce() {
    if (window.__azTrellisCssBlockerInstalled) return;
    window.__azTrellisCssBlockerInstalled = true;
    const BLOCK_PATTERNS = [/design\.trellis\.arizona\.edu\/css\/form-assembly\.css/i, /forms-a\.trellis\.arizona\.edu\/dist\/form-builder\//i, /forms-a\.trellis\.arizona\.edu\/uploads\/themes\//i, /forms-a\.trellis\.arizona\.edu\/wForms\/3\.11\/css\//i, /forms-a\.trellis\.arizona\.edu\/wForms\/3\.11\/js\/css/i];
    function isBlockedStylesheet(node) {
      if (!node || node.tagName !== 'LINK' || node.rel !== 'stylesheet') {
        return false;
      }
      return BLOCK_PATTERNS.some(rx => rx.test(node.href));
    }
    function interceptorFactory(original) {
      return function trellisCssInterceptor(node) {
        try {
          if (isBlockedStylesheet(node)) {
            return node;
          }
        } catch (e) {}
        return original.call(this, node);
      };
    }
    function interceptorBeforeFactory(original) {
      return function trellisCssInterceptorBefore(newNode, refNode) {
        try {
          if (isBlockedStylesheet(newNode)) {
            return newNode;
          }
        } catch (e) {}
        return original.call(this, newNode, refNode);
      };
    }
    const protoDoc = Document.prototype;
    const protoHead = HTMLHeadElement.prototype;
    if (!protoDoc.__azPatchedAppendChild) {
      protoDoc.__azPatchedAppendChild = true;
      protoDoc.appendChild = interceptorFactory(protoDoc.appendChild);
    }
    if (!protoHead.__azPatchedAppendChild) {
      protoHead.__azPatchedAppendChild = true;
      protoHead.appendChild = interceptorFactory(protoHead.appendChild);
    }
    if (!protoHead.__azPatchedInsertBefore) {
      protoHead.__azPatchedInsertBefore = true;
      protoHead.insertBefore = interceptorBeforeFactory(protoHead.insertBefore);
    }
    const headObserver = new MutationObserver(muts => {
      muts.forEach(m => {
        m.addedNodes.forEach(n => {
          if (isBlockedStylesheet(n) && n.parentNode) {
            n.parentNode.removeChild(n);
          }
        });
      });
    });
    headObserver.observe(document.head, {
      childList: true
    });
  }
  function loadTrellisScript(el) {
    const url = el.getAttribute('data-trellis-embed-src');
    if (!url || el.getAttribute('data-trellis-script-loaded') || el.getAttribute('data-trellis-script-preloaded')) {
      return;
    }
    el.setAttribute('data-trellis-script-loaded', '1');
    const script = document.createElement('script');
    script.src = url;
    script.defer = true;
    script.type = 'text/javascript';
    if (el.id) {
      script.setAttribute('data-qp-target-id', el.id);
    }
    document.head.appendChild(script);
  }
  function TrellisFormHandler(container, queryParams, editing) {
    this.container = container;
    this.queryParams = queryParams;
    this.editing = editing;
    this.processed = false;
    this.sanitized = false;
    this.spinnerInserted = false;
    this.spinnerRemoved = false;
    this.finalized = false;
    this.spinnerDelayTimer = null;
    this.spinnerStartTs = 0;
    this.prefillObserver = null;
    this.prefillFallbackTimer = null;
  }
  TrellisFormHandler.prototype.init = function init() {
    const SPINNER_DELAY_MS = 120;
    this.spinnerDelayTimer = setTimeout(() => {
      if (!this.processed && !this.spinnerInserted) {
        this.insertSpinner();
      }
    }, SPINNER_DELAY_MS);
    this.setupContentObserver();
    if (this.container.children.length > 0) {
      this.processForm();
    }
  };
  TrellisFormHandler.prototype.setupContentObserver = function setupContentObserver() {
    if (this.processed) return;
    const observer = new MutationObserver(() => {
      if (!this.processed && this.container.children.length > 0) {
        this.processForm();
        observer.disconnect();
      }
    });
    observer.observe(this.container, {
      childList: true,
      subtree: true
    });
  };
  TrellisFormHandler.prototype.processForm = function processForm() {
    if (this.processed) return;
    this.processed = true;
    if (this.editing) {
      this.setupEditingMode();
    }
    this.prefillFields(() => {
      this.sanitizeAndRetheme();
      this.observeDynamicMutations();
      this.finalized = true;
      if (this.spinnerDelayTimer) {
        clearTimeout(this.spinnerDelayTimer);
        this.spinnerDelayTimer = null;
      }
      this.removeSpinner();
    });
  };
  TrellisFormHandler.prototype.sanitizeAndRetheme = function sanitizeAndRetheme() {
    if (this.sanitized) return;
    this.sanitized = true;
    const root = this.container;
    root.querySelectorAll('[style]').forEach(el => {
      el.removeAttribute('style');
    });
    root.querySelectorAll('style').forEach(s => s.remove());
    root.querySelectorAll('.oneField br').forEach(br => {
      const prev = br.previousElementSibling;
      const next = br.nextElementSibling;
      if (prev && next && (next.matches('.inputWrapper') || next.querySelector('input,textarea,select'))) {
        br.remove();
      }
    });
    const addClass = (el, cls) => {
      if (!el.classList.contains(cls)) el.classList.add(...cls.split(/\s+/));
    };
    root.querySelectorAll('input, select, textarea, button').forEach(el => {
      const tag = el.tagName.toLowerCase();
      const type = (el.getAttribute('type') || '').toLowerCase();
      if (tag === 'input') {
        if (['text', 'email', 'tel', 'url', 'number', 'search', 'password', 'date', 'datetime-local', 'time'].includes(type)) {
          addClass(el, 'form-control');
        } else if (['checkbox', 'radio'].includes(type)) {
          addClass(el, 'form-check-input');
          let label = el.closest('label');
          if (!label) {
            const {
              id
            } = el;
            if (id) {
              label = root.querySelector(`label[for="${CSS.escape(id)}"]`);
            }
          }
          if (label) addClass(label, 'form-check-label');
          const wrapper = label ? label.parentElement : el.parentElement;
          if (wrapper && !wrapper.classList.contains('form-check')) {
            wrapper.classList.add('form-check');
          }
        } else if (type === 'submit') {
          addClass(el, 'btn btn-primary');
        }
      } else if (tag === 'select') {
        addClass(el, 'form-select');
      } else if (tag === 'textarea') {
        const name = el.getAttribute('name');
        if (name === 'tfa_7' || name === 'tfa_9') {
          addClass(el, 'form-control-plaintext');
        } else {
          addClass(el, 'form-control');
        }
      } else if (tag === 'button') {
        addClass(el, 'btn btn-primary');
      }
    });
    root.querySelectorAll('input.form-check-input').forEach(input => {
      if (!input.closest('.form-check')) {
        const wrapper = document.createElement('div');
        wrapper.className = 'form-check';
        input.parentNode.insertBefore(wrapper, input);
        wrapper.appendChild(input);
        const next = input.nextElementSibling;
        if (next && next.tagName === 'LABEL' && !next.classList.contains('form-check-label')) {
          next.classList.add('form-check-label');
          wrapper.appendChild(next);
        }
      }
    });
    root.querySelectorAll('.oneField').forEach(of => {
      if (!of.classList.contains('mb-3')) {
        of.classList.add('mb-3');
      }
      const label = of.querySelector('label');
      if (label && !label.classList.contains('form-label') && !label.classList.contains('form-check-label')) {
        label.classList.add('form-label');
      }
    });
    root.querySelectorAll('textarea[readonly]').forEach(ta => {
      if (!ta.value || ta.value.length > 160) {
        return;
      }
      ta.classList.add('form-control-plaintext');
    });
    const privacyLinks = root.querySelectorAll('a[href*="privacy-statement"]');
    privacyLinks.forEach(a => {
      const footer = a.closest('.wFormFooter');
      if (footer) {
        footer.remove();
      }
      const support = a.closest('p.supportInfo');
      if (support && support.parentNode) {
        if (support.textContent.trim() === '' || support.querySelectorAll('a').length === 0) {
          support.remove();
        }
      }
    });
    const autosize = ta => {
      if (!ta) return;
      const rawLines = ta.value.split(/\r?\n/);
      let lineCount = rawLines.filter((l, idx, arr) => !(idx === arr.length - 1 && l.trim() === '')).length || 1;
      if (lineCount > 6) lineCount = 6;
      ta.setAttribute('rows', lineCount);
      ta.style.resize = 'none';
      ta.style.overflow = 'hidden';
      const adjustPixelHeight = () => {
        ta.style.height = 'auto';
        ta.rows = lineCount;
        const scrollH = ta.scrollHeight;
        ta.style.height = `${scrollH}px`;
      };
      adjustPixelHeight();
      if (!ta.hasAttribute('data-az-autosize')) {
        ta.setAttribute('data-az-autosize', 'true');
        ta.addEventListener('input', () => {
          const newLines = ta.value.split(/\r?\n/).filter((l, idx, arr) => !(idx === arr.length - 1 && l.trim() === '')).length || 1;
          lineCount = Math.min(newLines, 6);
          ta.rows = lineCount;
          adjustPixelHeight();
        });
      } else {
        adjustPixelHeight();
      }
    };
    root.querySelectorAll('textarea.form-control-plaintext').forEach(ta => {
      autosize(ta);
    });
  };
  TrellisFormHandler.prototype.observeDynamicMutations = function observeDynamicMutations() {
    const observer = new MutationObserver(mutations => {
      let needsResanitize = false;
      let hasFormContent = false;
      mutations.forEach(m => {
        m.addedNodes.forEach(node => {
          if (node.nodeType === 1) {
            if (node.hasAttribute && node.hasAttribute('style')) {
              needsResanitize = true;
            }
            if (node.querySelector && node.querySelector('[style]')) {
              needsResanitize = true;
            }
            if (!hasFormContent && (node.matches('form') || node.querySelector && node.querySelector('form'))) {
              hasFormContent = true;
            }
          }
        });
      });
      if (needsResanitize) {
        this.sanitized = false;
        this.sanitizeAndRetheme();
      }
      if (hasFormContent && this.finalized) {
        this.removeSpinner();
      }
    });
    observer.observe(this.container, {
      childList: true,
      subtree: true
    });
  };
  TrellisFormHandler.prototype.insertSpinner = function insertSpinner() {
    if (this.spinnerInserted) return;
    this.spinnerInserted = true;
    this.spinnerStartTs = window.performance && performance.now ? performance.now() : Date.now();
    this.container.setAttribute('data-loading', 'true');
    const overlay = document.createElement('div');
    overlay.className = 'az-media-trellis__spinner-overlay';
    overlay.innerHTML = '<div class="az-media-trellis__spinner-wrapper d-flex flex-column align-items-center justify-content-center py-4">' + '<div class="spinner-border text-primary" role="status" aria-live="polite" aria-label="Loading"></div>' + '<div class="visually-hidden">Loading form…</div>' + '</div>';
    this.container.appendChild(overlay);
    this.spinnerTimeout = setTimeout(() => {
      this.removeSpinner(true);
    }, 15000);
  };
  TrellisFormHandler.prototype.removeSpinner = function removeSpinner(fallback) {
    if (this.spinnerRemoved) return;
    const overlay = this.container.querySelector('.az-media-trellis__spinner-overlay');
    if (!overlay) return;
    if (!fallback) {
      const hasForm = this.container.querySelector('form');
      if (!hasForm && !fallback) return;
    }
    overlay.remove();
    this.spinnerRemoved = true;
    this.container.removeAttribute('data-loading');
    if (this.spinnerTimeout) clearTimeout(this.spinnerTimeout);
  };
  TrellisFormHandler.prototype.setupEditingMode = function setupEditingMode() {
    const requiredFields = this.container.querySelectorAll('input[aria-required], input.required');
    requiredFields.forEach(field => {
      field.removeAttribute('aria-required');
      field.classList.remove('required');
    });
  };
  TrellisFormHandler.prototype.prefillFields = function prefillFields(done) {
    const callback = typeof done === 'function' ? done : function noop() {};
    const qp = this.queryParams || {};
    const targetNames = Object.keys(qp);
    const finalizePrefill = () => {
      this.hideEmptyOptionalPrefillFields();
      if (this.prefillObserver) {
        this.prefillObserver.disconnect();
        this.prefillObserver = null;
      }
      if (this.prefillFallbackTimer) {
        clearTimeout(this.prefillFallbackTimer);
        this.prefillFallbackTimer = null;
      }
      callback();
    };
    if (targetNames.length === 0) {
      finalizePrefill();
      return;
    }
    const tryApply = () => {
      const allPresent = targetNames.every(name => !!this.container.querySelector(`[name="${name}"]`));
      if (!allPresent) return false;
      targetNames.forEach(name => {
        const value = qp[name];
        const field = this.container.querySelector(`[name="${name}"]`);
        if (field && value != null && field.value !== String(value)) {
          field.value = value;
          field.dispatchEvent(new Event('input', {
            bubbles: true
          }));
          field.dispatchEvent(new Event('change', {
            bubbles: true
          }));
        }
      });
      return true;
    };
    if (tryApply()) {
      finalizePrefill();
      return;
    }
    this.prefillObserver = new MutationObserver(() => {
      if (tryApply()) {
        finalizePrefill();
      }
    });
    this.prefillObserver.observe(this.container, {
      childList: true,
      subtree: true
    });
    this.prefillFallbackTimer = setTimeout(() => {
      console.warn('Prefill fallback: proceeding before all fields detected');
      targetNames.forEach(name => {
        const field = this.container.querySelector(`[name="${name}"]`);
        if (field && qp[name] != null && field.value !== String(qp[name])) {
          field.value = qp[name];
          field.dispatchEvent(new Event('input', {
            bubbles: true
          }));
          field.dispatchEvent(new Event('change', {
            bubbles: true
          }));
        }
      });
      finalizePrefill();
    }, 2000);
  };
  TrellisFormHandler.prototype.hideEmptyOptionalPrefillFields = function hideEmptyOptionalPrefillFields() {
    const optionalIds = ['tfa_7', 'tfa_9'];
    optionalIds.forEach(id => {
      const field = this.container.querySelector(`[name="${id}"]`);
      if (!field) return;
      const supplied = !!(this.queryParams && Object.prototype.hasOwnProperty.call(this.queryParams, id) && this.queryParams[id] && String(this.queryParams[id]).trim() !== '');
      const emptyCurrent = !field.value || field.value.trim() === '';
      if (!supplied && emptyCurrent) {
        const wrapper = field.closest('.oneField') || this.container.querySelector(`#${id}-D`);
        if (wrapper && !wrapper.classList.contains('az-trellis-hidden-prefill')) {
          wrapper.classList.add('az-trellis-hidden-prefill');
          field.addEventListener('input', () => {
            if (field.value && field.value.trim() !== '') {
              wrapper.classList.remove('az-trellis-hidden-prefill');
            }
          }, {
            once: true
          });
        }
      }
    });
  };
  Drupal.behaviors.azMediaTrellis = {
    attach(context) {
      const config = drupalSettings.azMediaTrellis || {};
      const blockRemoteCss = !!config.blockRemoteCss;
      if (blockRemoteCss) {
        installCssBlockerOnce();
      }
      const formContainers = context.querySelectorAll('.az-media-trellis:not([data-az-processed])');
      formContainers.forEach(container => {
        container.setAttribute('data-az-processed', 'true');
        const queryParamsJson = container.getAttribute('data-query-params') || '{}';
        let queryParams = {};
        try {
          queryParams = JSON.parse(queryParamsJson);
        } catch (e) {
          if (typeof console !== 'undefined') {
            console.error('[azMediaTrellis] Failed to parse query params JSON:', e);
          }
        }
        const editing = container.getAttribute('data-editing') === 'true';
        const handler = new TrellisFormHandler(container, queryParams, editing);
        handler.init();
        if (blockRemoteCss) {
          loadTrellisScript(container);
        }
      });
    }
  };
})(Drupal, drupalSettings);