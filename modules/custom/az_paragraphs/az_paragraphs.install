<?php

/**
 * @file
 * Az_paragraphs.install.
 *
 * Install, update and uninstall functions for az_paragraphs install
 * profile.
 */

use Drupal\Core\Entity\RevisionableInterface;
use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\az_core\Utility\AZBootstrapMarkupConverter;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_update_last_removed().
 */
function az_paragraphs_update_last_removed() {
  // Remove updates added before 2.6.0.
  return 920301;
}

/**
 * Replace broken migrated paragraph_behavior settings with defaults.
 */
function az_paragraphs_update_920601(&$sandbox) {

  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityQuery('paragraph')
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    // Set the total number of paragraphs to be updated.
    $sandbox['total'] = $count;
    // Set current to 0.
    $sandbox['current'] = 0;
    // Set updated_count to 0.
    $sandbox['updated_count'] = 0;
    // If there are no paragraphs to be updated, set the finished flag to 1.
    if (empty($sandbox['total'])) {
      \Drupal::messenger()
        ->addMessage('No broken behavior settings found.');
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Set the number of paragraphs to be updated per batch.
  $paragraphs_per_batch = 25;
  // Get the paragraph ids to be updated.
  $paragraph_ids = \Drupal::entityQuery('paragraph')
    ->accessCheck(FALSE)
    // Update 25 paragraphs per batch.
    ->range($sandbox['current'], $sandbox['current'] + $paragraphs_per_batch)
    ->execute();

  $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($paragraph_ids);
  foreach ($paragraphs as $paragraph) {
    $needs_update = FALSE;
    $behavior_settings = $paragraph->getAllBehaviorSettings();
    if (isset($behavior_settings['az_default_paragraph_behavior']['az_display_settings']['bottom_spacing'])
      && is_array($behavior_settings['az_default_paragraph_behavior']['az_display_settings']['bottom_spacing'])
    ) {
      $needs_update = TRUE;
      $behavior_settings['az_default_paragraph_behavior']['az_display_settings']['bottom_spacing'] = 'mb-0';
    }
    if (isset($behavior_settings['az_cards_paragraph_behavior'])
      && is_null($behavior_settings['az_cards_paragraph_behavior']['card_width'])
      && is_null($behavior_settings['az_cards_paragraph_behavior']['card_style'])
      && is_null($behavior_settings['az_cards_paragraph_behavior']['card_clickable'])
      && is_null($behavior_settings['az_cards_paragraph_behavior']['az_display_settings']['card_width_sm'])
      && is_null($behavior_settings['az_cards_paragraph_behavior']['az_display_settings']['card_width_xs'])
    ) {
      $needs_update = TRUE;
      $behavior_settings['az_cards_paragraph_behavior']['card_width'] = 'col-md-4 col-lg-4';
      $behavior_settings['az_cards_paragraph_behavior']['card_style'] = 'card';
      $behavior_settings['az_cards_paragraph_behavior']['card_clickable'] = 0;
      $behavior_settings['az_cards_paragraph_behavior']['az_display_settings']['card_width_sm'] = 'col-sm-12';
      $behavior_settings['az_cards_paragraph_behavior']['az_display_settings']['card_width_xs'] = 'col-12';
    }
    if ($needs_update) {
      $paragraph->setAllBehaviorSettings($behavior_settings);
      $paragraph->save();
      $sandbox['updated_count']++;
    }
    $sandbox['current']++;
  }
  $sandbox['#finished'] = ($sandbox['total'] === '0') ? 1 : ($sandbox['current'] / $sandbox['total']);
  return t('Paragraph behavior settings fixed on %count paragraphs.', ['%count' => $sandbox['updated_count']]);
}

/**
 * Enable ckeditor_indentblock module by default.
 */
function az_paragraphs_update_1021001() {
  \Drupal::service('module_installer')->install(['ckeditor_indentblock']);
}

/**
 * Empty update since we reverted our addition of the anchor_link module.
 */
function az_paragraphs_update_1021201() {
}

/**
 * Apply Bootstrap 5 compatibility updates to paragraphs with text_area fields.
 */
function az_paragraphs_update_1130001(&$sandbox) {
  $logger = \Drupal::logger('az_paragraphs');
  $paragraph_storage = \Drupal::service('entity_type.manager')->getStorage('paragraph');

  if (!isset($sandbox['progress'])) {
    // Process paragraphs from our paragraph types containing any of these:
    // - field_az_text_area using az_standard or full_html format
    // - field_az_full_html with any content
    // - field_az_cards.body using az_standard or full_html format
    // - field_az_accordion.body using az_standard or full_html format.
    $query = $paragraph_storage->getQuery();
    $query->accessCheck(FALSE);

    // Text area paragraphs.
    $text_area_group = $query->andConditionGroup()
      ->condition('type', [
        'az_splitscreen',
        'az_text',
        'az_text_background',
        'az_text_media',
      ], 'IN')
      ->condition('field_az_text_area.format', ['az_standard', 'full_html'], 'IN');

    // HTML paragraphs.
    $html_group = $query->andConditionGroup()
      ->condition('type', 'az_html')
      ->exists('field_az_full_html');

    // Card paragraphs.
    $card_group = $query->andConditionGroup()
      ->condition('type', 'az_card')
      ->exists('field_az_cards.body')
      ->condition('field_az_cards.body_format', ['az_standard', 'full_html'], 'IN');

    // Accordion paragraphs.
    $accordion_group = $query->andConditionGroup()
      ->condition('type', 'az_accordion')
      ->exists('field_az_accordion.body')
      ->condition('field_az_accordion.body_format', ['az_standard', 'full_html'], 'IN');

    // Combine all conditions.
    $group = $query->orConditionGroup()
      ->condition($text_area_group)
      ->condition($html_group)
      ->condition($card_group)
      ->condition($accordion_group);

    $query->condition($group);

    $sandbox['ids'] = $query->execute();
    $sandbox['max'] = count($sandbox['ids']);
    $sandbox['progress'] = 0;
    $sandbox['updated_count'] = 0;
    $sandbox['skipped_count'] = 0;
  }
  $ids = array_slice($sandbox['ids'], $sandbox['progress'], 20);

  foreach ($ids as $id) {
    /** @var \Drupal\paragraphs\Entity\Paragraph|null $paragraph */
    $paragraph = $paragraph_storage->load($id);
    if (!$paragraph) {
      $logger->warning('Could not load paragraph @pid', ['@pid' => $id]);
      $sandbox['skipped_count']++;
      $sandbox['progress']++;
      continue;
    }

    // Skip unused/orphan paragraphs.
    $parent_type = $paragraph->get('parent_type')->value;
    $parent_field = $paragraph->get('parent_field_name')->value;
    $query = \Drupal::service('entity_type.manager')->getStorage($parent_type)
      ->getQuery()
      ->condition("$parent_field.target_id", $id)
      ->range(0, 1)
      ->accessCheck(FALSE);
    $parent_entity_result = $query->execute();
    if (empty($parent_entity_result)) {
      // Paragraph is not used in any current revisions of the parent type.
      $logger->info('Skipping unused paragraph @pid', ['@pid' => $id]);
      $sandbox['skipped_count']++;
      $sandbox['progress']++;
      continue;
    }

    $needs_update = FALSE;
    $field_name = NULL;

    // Handle different field types based on paragraph type.
    switch ($paragraph->bundle()) {
      case 'az_splitscreen':
      case 'az_text':
      case 'az_text_background':
      case 'az_text_media':
        // Text area paragraphs.
        $field_name = 'field_az_text_area';
        /** @var \Drupal\text\Plugin\Field\FieldType\TextLongItem $field */
        $field = $paragraph->get($field_name);
        if (!empty($field->value) && in_array($field->format, ['az_standard', 'full_html'])) {
          $processed_value = AZBootstrapMarkupConverter::compareProcessor($field->value);
          if ($processed_value !== $field->value) {
            $needs_update = TRUE;
            $paragraph->$field_name->value = $processed_value;
          }
        }
        break;

      case 'az_html':
        // HTML paragraphs.
        $field_name = 'field_az_full_html';
        /** @var \Drupal\text\Plugin\Field\FieldType\TextLongItem $field */
        $field = $paragraph->get($field_name);
        if (!empty($field->value)) {
          $processed_value = AZBootstrapMarkupConverter::compareProcessor($field->value);
          if ($processed_value !== $field->value) {
            $needs_update = TRUE;
            $paragraph->$field_name->value = $processed_value;
          }
        }
        break;

      case 'az_card':
        // Card paragraphs.
        $field_name = 'field_az_cards';
        $field = $paragraph->get($field_name);
        /** @var \Drupal\az_card\Plugin\Field\FieldType\AZCardItem $item */
        foreach ($field as $delta => $item) {
          if (!empty($item->body) && in_array($item->body_format, ['az_standard', 'full_html'])) {
            $processed_value = AZBootstrapMarkupConverter::compareProcessor($item->body);
            if ($processed_value !== $item->body) {
              $needs_update = TRUE;
              $item->body = $processed_value;
            }
          }
        }
        break;

      case 'az_accordion':
        // Accordion paragraphs.
        $field_name = 'field_az_accordion';
        $field = $paragraph->get($field_name);
        /** @var \Drupal\az_accordion\Plugin\Field\FieldType\AZAccordionItem $item */
        foreach ($field as $delta => $item) {
          if (!empty($item->body) && in_array($item->body_format, ['az_standard', 'full_html'])) {
            $processed_value = AZBootstrapMarkupConverter::compareProcessor($item->body);
            if ($processed_value !== $item->body) {
              $needs_update = TRUE;
              $item->body = $processed_value;
            }
          }
        }
        break;
    }

    if ($needs_update) {
      // Save the paragraph first to create the new revision.
      $paragraph->setNewRevision(TRUE);
      $paragraph->save();

      // Handle parent entity revision if needed.
      $parent = $paragraph->getParentEntity();
      if ($parent instanceof RevisionableInterface) {
        // Load latest version to ensure we're not working with an older
        // revision.
        $parent_storage = \Drupal::entityTypeManager()->getStorage($parent->getEntityTypeId());
        /** @var \Drupal\Core\Entity\ContentEntityInterface $parent */
        $parent = $parent_storage->load($parent->id());

        // Create new revision of parent.
        $parent->setNewRevision(TRUE);

        // Get the parent entity field that references this paragraph.
        $parent_field = $paragraph->get('parent_field_name')->value;
        $parent_items = $parent->get($parent_field);

        // Update parent field reference to point to the new paragraph revision.
        $field_updated = FALSE;
        /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item */
        foreach ($parent_items as $delta => $item) {
          if ($item->target_id == $paragraph->id()) {
            // Update reference in the parent field items list.
            $parent_items->get($delta)->setValue([
              'target_id' => $paragraph->id(),
              'target_revision_id' => $paragraph->getRevisionId(),
            ]);
            $field_updated = TRUE;
          }
        }

        if (!$field_updated) {
          $logger->warning('Could not find paragraph @pid in parent @parent_type @parent_id field @field', [
            '@pid' => $id,
            '@parent_type' => $parent->getEntityTypeId(),
            '@parent_id' => $parent->id(),
            '@field' => $parent_field,
          ]);
          // Skip saving if we couldn't find the paragraph reference.
          $sandbox['progress']++;
          continue;
        }

        // Set the updated field back on the parent.
        $parent->set($parent_field, $parent_items->getValue());

        // Include a log revision message for the parent, if possible.
        if ($parent instanceof RevisionLogInterface && !$parent instanceof ParagraphInterface) {
          $parent->setRevisionLogMessage(__FUNCTION__ . t(': Updated child @paragraph_bundle paragraph @id content (revision: @vid) for Arizona Bootstrap 5 compatibility.', [
            '@paragraph_bundle' => $paragraph->bundle(),
            '@id' => $id,
            '@vid' => $paragraph->getRevisionId(),
          ]));
        }

        // Save the parent entity.
        $parent->save();

        $logger->info('Updated @paragraph_bundle paragraph @pid (revision: @vid) and parent @parent_bundle @parent_type @parent_id', [
          '@paragraph_bundle' => $paragraph->bundle(),
          '@pid' => $id,
          '@vid' => $paragraph->getRevisionId(),
          '@parent_type' => $parent->getEntityTypeId(),
          '@parent_bundle' => $parent->bundle(),
          '@parent_id' => $parent->id(),
        ]);
      }
      $sandbox['updated_count']++;
    }

    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    return t('Completed processing @count total paragraphs. @paragraphs_updated paragraphs updated for Bootstrap 5 compatibility. @paragraphs_skipped paragraphs skipped.', [
      '@count' => $sandbox['progress'],
      '@paragraphs_updated' => $sandbox['updated_count'],
      '@paragraphs_skipped' => $sandbox['skipped_count'],
    ]);
  }

  return NULL;
}
