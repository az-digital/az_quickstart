/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
((Drupal, once) => {
  Drupal.behaviors.az_vimeo_video_bg = {
    attach() {
      function initVimeoBackgrounds() {
        const defaultAspectRatio = 16 / 9;
        function vimeoError(error) {
          switch (error.name) {
            case 'PasswordError':
              console.log('The Vimeo video is password-protected.');
              break;
            case 'PrivacyError':
              console.log('The Vimeo video is private.');
              break;
            default:
              console.log(`Some errors occurred with the Vimeo video: ${error.name}`);
              break;
          }
        }
        function setDimensions(container) {
          const parentParagraph = container.parentNode;
          let parentHeight = parentParagraph.offsetHeight;
          parentHeight = `${parentHeight.toString()}px`;
          container.style.height = parentHeight;
          if (container.dataset.style === 'bottom') {
            container.style.top = 0;
          }
          const thisPlayer = container.getElementsByClassName('az-video-player')[0].firstChild;
          if (thisPlayer === null) {
            return;
          }
          thisPlayer.style.zIndex = -100;
          const width = container.offsetWidth;
          const height = container.offsetHeight;
          const pWidth = Math.ceil(height * defaultAspectRatio);
          const pHeight = Math.ceil(width / defaultAspectRatio);
          let widthMinuspWidthDividedByTwo = (width - pWidth) / 2;
          widthMinuspWidthDividedByTwo = `${widthMinuspWidthDividedByTwo.toString()}px`;
          let pHeightRatio = (height - pHeight) / 2;
          pHeightRatio = `${pHeightRatio.toString()}px`;
          if (width / defaultAspectRatio < height) {
            thisPlayer.width = pWidth;
            thisPlayer.height = height;
            thisPlayer.style.left = widthMinuspWidthDividedByTwo;
            thisPlayer.style.top = 0;
          } else {
            thisPlayer.height = pHeight;
            thisPlayer.width = width;
            thisPlayer.style.top = pHeightRatio;
            thisPlayer.style.left = 0;
          }
        }
        function handlePlayButtonClick(element, parentParagraph) {
          return event => {
            event.preventDefault();
            element.player.play().catch(error => vimeoError(error));
            parentParagraph.classList.add('az-video-playing');
            parentParagraph.classList.remove('az-video-paused');
          };
        }
        function handlePauseButtonClick(element, parentParagraph) {
          return event => {
            event.preventDefault();
            element.player.pause().catch(error => vimeoError(error));
            parentParagraph.classList.add('az-video-paused');
            parentParagraph.classList.remove('az-video-playing');
          };
        }
        function initVimeoElement(element, defaultOptions) {
          const parentParagraph = element.parentNode;
          const vimeoId = element.dataset.vimeoVideoId;
          const videoPlayer = element.getElementsByClassName('az-video-player')[0];
          const VimeoPlayer = window.Vimeo;
          element.player = new VimeoPlayer.Player(videoPlayer, {
            id: vimeoId,
            autopause: defaultOptions.autopause,
            autoplay: element.dataset.autoplay === 'true',
            controls: 0,
            loop: defaultOptions.loop,
            muted: defaultOptions.muted
          });
          element.player.on('bufferend', () => {
            setDimensions(element);
            parentParagraph.classList.add('az-video-playing');
          });
          const playButtons = element.getElementsByClassName('az-video-play');
          if (playButtons[0]) {
            playButtons[0].addEventListener('click', handlePlayButtonClick(element, parentParagraph));
          }
          const pauseButtons = element.getElementsByClassName('az-video-pause');
          if (pauseButtons[0]) {
            pauseButtons[0].addEventListener('click', handlePauseButtonClick(element, parentParagraph));
          }
        }
        function handleVimeoAPILoaded(bgVideoParagraphs, defaultOptions) {
          Array.from(bgVideoParagraphs).forEach(element => {
            initVimeoElement(element, defaultOptions);
          });
        }
        if (window.screen && window.screen.width > 768) {
          const defaultOptions = {
            vimeoId: '',
            autopause: false,
            autoplay: true,
            controls: 0,
            loop: true,
            muted: true,
            playButtonClass: 'az-video-play',
            pauseButtonClass: 'az-video-pause'
          };
          const bgVideoParagraphs = document.getElementsByClassName('az-js-vimeo-video-background');
          const tag = document.createElement('script');
          tag.src = 'https://player.vimeo.com/api/player.js';
          document.head.appendChild(tag);
          tag.onload = () => handleVimeoAPILoaded(bgVideoParagraphs, defaultOptions);
          const resize = () => {
            Array.from(bgVideoParagraphs).forEach(element => {
              setDimensions(element);
            });
          };
          window.addEventListener('resize', () => {
            resize();
          });
        }
      }
      once('vimeoTextOnMedia-init', 'body').forEach(initVimeoBackgrounds);
    }
  };
})(Drupal, once);