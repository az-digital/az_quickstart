{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    'paragraph',
    'position-relative',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    text_on_media.style != 'bottom' ? 'text-on-media',
    text_on_media.full_width,
    text_on_media.bg_attachment
  ]
%}
{% set col_attributes = create_attribute() %}
{%
  set col_classes = [
    'col',
    text_on_media.style == 'bottom' ? 'col-md-10 col-md-offset-1',
    text_on_media.style != 'bottom' ? text_on_media.position,
  ]
%}
{% set content_attributes = create_attribute() %}
{%
  set content_classes = [
    'content',
    text_on_media.bg_color,
    text_on_media.style,
    text_on_media.style == 'column' ? 'p' ~ text_on_media.text_media_spacing,
    text_on_media.style == 'box' ? 'm' ~ text_on_media.text_media_spacing

  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes).setAttribute('id', paragraph.bundle() ~ '-' ~ paragraph.id()) }}>
    {% block content %}
      {% if text_on_media.style == 'bottom' %}
        {{ text_on_bottom }}
      {% endif %}
      {# Layout for content width AND full width styles #}
      {% if text_on_media.style != 'bottom' %}
        {{style_element}}
      {% endif %}
      <div class="container">
        <div class="az-full-width-row">
          <div{{ col_attributes.addClass(col_classes) }}>
            <div{{ content_attributes.addClass(content_classes).addClass('az-full-width-column-content') }}>
              <h2 class="mt-0 text-blue bold">{{ paragraph.field_az_title.value }}</h2>
              {{ content }}
            </div>
          </div>
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
