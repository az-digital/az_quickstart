<?php

/**
 * @file
 * Az_paragraphs_text_background.install.
 *
 * Install, update and uninstall functions for
 * az_paragraphs_text_background module.
 */

/**
 * Implements hook_update_last_removed().
 */
function az_paragraphs_text_background_update_last_removed() {
  // Remove updates added before 2.6.0.
  return 9201;
}

/**
 * Update text-with-background color classes for Arizona Bootstrap 5.
 */
function az_paragraphs_text_background_update_1130001(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityQuery('paragraph')
      ->accessCheck(FALSE)
      ->condition('type', 'az_text_background')
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['updated_count'] = 0;
    // If there are no paragraphs to be updated, set the finished flag to 1.
    if (empty($sandbox['total'])) {
      \Drupal::messenger()
        ->addMessage('No text-with-background paragraphs found.');
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $paragraphs_per_batch = 25;

  $paragraph_ids = \Drupal::entityQuery('paragraph')
    ->accessCheck(FALSE)
    ->condition('type', 'az_text_background')
    ->range($sandbox['current'], $sandbox['current'] + $paragraphs_per_batch)
    ->execute();

  $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($paragraph_ids);
  foreach ($paragraphs as $paragraph) {
    $updated = FALSE;

    foreach (array_keys($paragraph->getTranslationLanguages()) as $langcode) {
      $paragraph = $paragraph->getTranslation($langcode);
      $needs_update = FALSE;

      $behavior_settings = $paragraph->getAllBehaviorSettings();

      // Update text-with-background color for Arizona Bootstrap 5.
      if (isset($behavior_settings['az_text_background_paragraph_behavior']['text_background_color'])) {
        $text_bg_color = $behavior_settings['az_text_background_paragraph_behavior']['text_background_color'];
        $bg_color_mappings = [
          'bg-red' => 'text-bg-red',
          'bg-blue' => 'text-bg-blue',
          'bg-sky' => 'text-bg-sky',
          'bg-oasis' => 'text-bg-oasis',
          'bg-azurite' => 'text-bg-azurite',
          'bg-midnight' => 'text-bg-midnight',
          'bg-bloom' => 'text-bg-bloom',
          'bg-chili' => 'text-bg-chili',
          'bg-cool-gray' => 'text-bg-cool-gray',
          'bg-warm-gray' => 'text-bg-warm-gray',
          'bg-gray-100' => 'text-bg-gray-100',
          'bg-gray-200' => 'text-bg-gray-200',
          'bg-gray-300' => 'text-bg-gray-300',
          'bg-leaf' => 'text-bg-leaf',
          'bg-river' => 'text-bg-river',
          'bg-silver' => 'text-bg-silver',
          'bg-ash' => 'text-bg-ash',
          'bg-mesa' => 'text-bg-mesa',
          'bg-white' => 'text-bg-white',
        ];
        if (isset($bg_color_mappings[$text_bg_color])) {
          $needs_update = TRUE;
          $behavior_settings['az_text_background_paragraph_behavior']['text_background_color'] = $bg_color_mappings[$text_bg_color];
        }
      }
      if ($needs_update) {
        $updated = TRUE;
        $paragraph->setAllBehaviorSettings($behavior_settings);
        $paragraph->save();
      }
    }

    if ($updated) {
      $sandbox['updated_count']++;
    }

    $sandbox['current']++;
  }

  $sandbox['#finished'] = ($sandbox['total'] === '0') ? 1 : ($sandbox['current'] / $sandbox['total']);

  return t('Background color classes updated for %count text-with-background paragraphs.', ['%count' => $sandbox['updated_count']]);
}
