<?php

/**
 * @file
 * Install, update and uninstall functions for az_paragraphs_cards module.
 */

/**
 * Update az cards for AZ Bootstrap 5 compatibility.
 */
function az_paragraphs_cards_update_1130001(&$sandbox) {
  // Initialize batch processing if this is the first run.
  if (!isset($sandbox['total'])) {
    // Get all paragraphs of type az_cards.
    $paragraph_ids = \Drupal::entityQuery('paragraph')
      ->accessCheck(FALSE)
      ->condition('type', 'az_cards')
      ->execute();

    $sandbox['total'] = count($paragraph_ids);
    $sandbox['current'] = 0;
    $sandbox['ids'] = $paragraph_ids;
    $sandbox['updated_count'] = 0;

    // If no paragraphs to update, mark as finished.
    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return t('No paragraphs with az_cards type found.');
    }
  }

  // Process paragraphs in batches.
  $paragraphs_per_batch = 25;
  $ids = array_slice($sandbox['ids'], $sandbox['current'], $paragraphs_per_batch);

  if (!empty($ids)) {
    $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($ids);

    foreach ($paragraphs as $paragraph) {
      $updated = FALSE;
      $behavior_settings = $paragraph->getAllBehaviorSettings();

      // Update cards card_style for AZ Bootstrap 5.
      if (isset($behavior_settings['az_cards_paragraph_behavior']['card_style'])) {
        $updated = TRUE;
        $card_style = $behavior_settings['az_cards_paragraph_behavior']['card_style'];

        if ($card_style === 'card card-borderless') {
          $behavior_settings['az_cards_paragraph_behavior']['card_style'] = 'card border-0';
        }
      }

      // Loop through az_cards for updates.
      if ($paragraph->hasField('field_az_cards')) {
        $field_items = $paragraph->get('field_az_cards');

        foreach ($field_items as $item) {
          if (isset($item->options)) {
            $options = $item->options;

            // Update card link_style for AZ Bootstrap 5.
            if (isset($options['link_style']) && $options['link_style'] === 'sr-only') {
              $updated = TRUE;
              $options['link_style'] = 'visually-hidden';
              $item->options = $options;
            }

            // Update cards bg color for AZ Bootstrap 5.
            if (isset($options['class']) && str_starts_with($options['class'], 'bg-') && $options['class'] !== 'bg-transparent') {
              $updated = TRUE;
              $card_class = 'text-' . $options['class'];
              $options['class'] = $card_class;
              $item->options = $options;
            }

            // Update card title alignment for AZ Bootstrap 5.
            if (isset($options['title_alignment'])) {
              if ($options['title_alignment'] === 'text-left') {
                $updated = TRUE;
                $options['title_alignment'] = 'text-start';
                $item->options = $options;
              }

              if ($options['title_alignment'] === 'text-right') {
                $updated = TRUE;
                $options['title_alignment'] = 'text-end';
                $item->options = $options;
              }
            }
          }
        }
      }

      // Save the paragraph if updated.
      if ($updated) {
        $paragraph->setAllBehaviorSettings($behavior_settings);
        $paragraph->save();
        $sandbox['updated_count']++;
      }

      $sandbox['current']++;
    }

    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
  else {
    $sandbox['#finished'] = 1;
  }

  return t('Paragraph behavior settings fixed on %count paragraphs.', ['%count' => $sandbox['updated_count']]);
}
