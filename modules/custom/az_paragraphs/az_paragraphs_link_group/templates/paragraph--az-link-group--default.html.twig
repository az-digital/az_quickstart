{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'az-link-group',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'az-link-group-style-' ~ link_group.group_style|clean_class,
    link_group.group_style|clean_class,
  ]
%}

{% set link_attributes = create_attribute() %}
{% set button_attributes = create_attribute() %}
{% set dropdown_attributes = create_attribute() %}

{% 
  set button_classes = [
    'btn',
    'my-1',
    link_group.button_color ? link_group.button_color,
    link_group.button_size ? link_group.button_size,
  ]
%}

{% 
  set dropdown_classes = [
    'btn',
    'dropdown-toggle',
    link_group.button_color ? link_group.button_color,
    link_group.button_size ? link_group.button_size,
  ]
%}

{% 
  set listgroup_classes = [
    'list-group-item',
    'list-group-item-action'
  ]
%}

{% if link_group.group_style ==  'buttons' %}
  {% set link_classes = button_classes %}
{% elseif link_group.group_style == 'dropdown' %}
  {% set link_classes = 'dropdown-item' %}
{% elseif link_group.group_style == 'list_group' %}
  {% set link_classes = listgroup_classes %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      {% if paragraph.field_az_title.value is not empty %}
        <h2>{{ paragraph.field_az_title.value }}</h2>
      {% endif %}
      {% if link_group.group_style == 'dropdown' %}
        <button {{ dropdown_attributes.addClass(dropdown_classes) }} type="button" id="az-link-group-dropdown-{{ paragraph.id() }}" data-toggle="dropdown" aria-expanded="false">{{ link_group.dropdown_title }}</button>
        <div class="dropdown-menu" aria-labelledby="az-link-group-dropdown-{{ paragraph.id() }}">
      {% endif %}
      {% for key, item in paragraph.field_az_link_item %}
        {% if key|first != '#' %}
          <a href="{{ item.url }}" {{ link_attributes.addClass(link_classes) }}>{{ item.title }}</a>
        {% endif %}
      {% endfor %}
      {% if link_group.group_style == 'dropdown' %}
        {# Close surrounding div if dropdown #}
        </div>
      {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
