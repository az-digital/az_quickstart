{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 * - grid: whether the gallery is a grid, e.g. photo gallery.
 * - modal: unique id for the modal element.
 * - gallery: unique id for the carousel element.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
    <div class="container">
  		<div class="row">
        {% if content.field_az_photos[0] %}
        {% if grid %}
          {# Render the images for the gallery grid display. #}
          {% for key, item in paragraph.field_az_photos if key|first != '#' %}
            {% set modalimage = {
              '#theme':      'image_style',
              '#style_name': 'az_card_image',
              '#uri':        item.entity.field_media_az_image.0.entity.uri.value,
              '#alt':        item.entity.field_media_az_image.0.entity.uri.alt,
              '#attributes': { class: [ 'photo-gallery-grid-img' ] },
            } %}
            <div class="col-6 col-md-4 col-lg-3 px-min py-min" data-toggle="modal" data-target="#{{ modal }}">
              <a href="#{{ gallery }}" data-slide-to="{{ loop.index0 }}">
                <picture class="card-img img-responsive">
                 {{ modalimage }}
                </picture>
              </a>
            </div>
          {% endfor %}
          {# Modal wrapper for grid. #}
          <div id="{{ modal }}" class="modal bg-transparent-black az-gallery-modal" tabindex="-1" role="dialog">
        {% endif %}

          <div id="{{ gallery }}" class="carousel slide{% if grid %} az-gallery{% endif %}" data-ride="carousel" data-interval="false">
            {% if grid %}
              {# Button for modal closer. #}
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">Ã—</span>
              </button>
            {% endif %}
            <div class="carousel-inner{% if grid %} az-gallery-inner{% endif %}">
              {% for key, item in paragraph.field_az_photos if key|first != '#' %}

                {# Create the actual image for this element. #}
                {% set imagestyle = {
                  '#theme':      'image_style',
                  '#style_name': 'az_large',
                  '#uri':        item.entity.field_media_az_image.0.entity.uri.value,
                  '#alt':        item.entity.field_media_az_image.0.entity.uri.alt,
                  '#attributes': { class: [ 'd-block', not grid ? 'w-100' : 'az-gallery-img' ] },
                } %}

                {# Wrapper for the individual carousel item. #}
                <div class="carousel-item{% if grid %} az-gallery-item{% endif %}{% if loop.first %} active{% endif %}">
                  <div class="carousel-image">
                    {{ imagestyle }}
                  </div>

                  {# Render the caption, if one exists. #}
                  {% if item.entity.field_az_caption.value %}
                    <div class="carousel-caption{% if grid %} az-gallery-caption d-block{% else %} d-none d-md-block{% endif %}">
                      <p>{{ item.entity.field_az_caption.value }}</p>
                    </div>
                  {% endif %}
                </div>
              {% endfor %}
            </div>
            <a class="carousel-control-prev" href="#{{ gallery }}" role="button" data-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#{{ gallery }}" role="button" data-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="sr-only">Next</span>
            </a>
          </div>
          {% if grid %}
          {# Modal wrapper for grid. #}
          </div>
          {% endif %}
        {% endif %}
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
